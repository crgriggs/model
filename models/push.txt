MODULE pushInstr

INPUT

State.rsp : BITVEC[64];
State.memory : FUNC[1];

VAR
SRC : BITVEC[64];
OperandSize : size;
StackAddrSize : size;
rsp : BITVEC[64];
memory : BITVEC[64];

CONST
RNG: BITVECFUNC[64];

SRC_i : BITVEC[64];
rsp_i : BITVEC[64];
memory_i : BITVEC[64];

DEFINE

b0 := ( 0 # [0:0] );
b1 := ( 1 # [0:0] );
ucl_hex_0 := ( b0 @ b0 @ b0 @ b0);
ucl_hex_1 := ( b0 @ b0 @ b0 @ b1);
ucl_hex_2 := ( b0 @ b0 @ b1 @ b0);
ucl_hex_3 := ( b0 @ b0 @ b1 @ b1);
ucl_hex_4 := ( b0 @ b1 @ b0 @ b0);
ucl_hex_5 := ( b0 @ b1 @ b0 @ b1);
ucl_hex_6 := ( b0 @ b1 @ b1 @ b0);
ucl_hex_7 := ( b0 @ b1 @ b1 @ b1);
ucl_hex_8 := ( b1 @ b0 @ b0 @ b0);
ucl_hex_9 := ( b1 @ b0 @ b0 @ b1);
ucl_hex_a := ( b1 @ b0 @ b1 @ b0);
ucl_hex_b := ( b1 @ b0 @ b1 @ b1);
ucl_hex_c := ( b1 @ b1 @ b0 @ b0);
ucl_hex_d := ( b1 @ b1 @ b0 @ b1);
ucl_hex_e := ( b1 @ b1 @ b1 @ b0);
ucl_hex_f := ( b1 @ b1 @ b1 @ b1);

RSP := State.rsp;
ESP := State.rsp # [31:0];
SP := State.rsp # [15:0];
SP0 := case
    OperandSize = bits32 & StackAddrSize != bits32 & (StackAddrSize != bits64) : SP - 4;
    OperandSize != bits32 & (StackAddrSize != bits32 & (StackAddrSize != bits64)) : SP - 2;
    default : SP;
esac;

SP_n := SP0;

RSP0 := case
    OperandSize = bits32 & OperandSize != bits64 & (StackAddrSize = bits64) : ( RSP ) -_64 ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_4) );
    OperandSize = bits64 & StackAddrSize = bits64 : ( RSP ) -_64 ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_8) );
    OperandSize != bits32 & (OperandSize != bits64 & (StackAddrSize = bits64)) : ( RSP ) -_64 ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_2) );
    default : RSP;
esac;

RSP_n := RSP0;

ESP0 := case
    OperandSize = bits64 & StackAddrSize = bits32 & StackAddrSize != bits64 : ESP - 8;
    OperandSize = bits32 & OperandSize != bits64 & (StackAddrSize = bits32 & StackAddrSize != bits64) : ESP - 4;
    OperandSize != bits32 & (OperandSize != bits64 & (StackAddrSize = bits32 & StackAddrSize != bits64)) : ESP - 2;
    default : ESP;
esac;

ESP_n := ESP0;

memory0 := case
    OperandSize = bits32 & OperandSize != bits64 & (StackAddrSize = bits32 & StackAddrSize != bits64) : ( SRC );
    OperandSize != bits32 & (OperandSize != bits64 & (StackAddrSize = bits32 & StackAddrSize != bits64)) : ( SRC );
    OperandSize = bits32 & StackAddrSize != bits32 & (StackAddrSize != bits64) : ( SRC );
    OperandSize != bits32 & (StackAddrSize != bits32 & (StackAddrSize != bits64)) : ( SRC );
    OperandSize = bits64 & StackAddrSize = bits64 : ( SRC );
    OperandSize = bits32 & OperandSize != bits64 & (StackAddrSize = bits64) : ( SRC );
    OperandSize != bits32 & (OperandSize != bits64 & (StackAddrSize = bits64)) : ( SRC );
    OperandSize = bits64 & StackAddrSize = bits32 & StackAddrSize != bits64 : ( SRC );
    default : State.memory(State.rsp);
esac;

memory_n := memory0;


ASSIGN

init[SRC] := SRC_i;
next[SRC] := RNG(SRC);

init[OperandSize] := {bits64, bits32, bits16};
next[OperandSize] := {bits64, bits32, bits16};

init[StackAddrSize] := {bits64, bits32, bits16};
next[StackAddrSize] := {bits64, bits32, bits16};

init[rsp] := rsp_i;
next[rsp] := RSP_n;

init[memory] := memory_i;
next[memory] := memory_n;

