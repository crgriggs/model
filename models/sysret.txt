MODULE sysretInstr

INPUT

State.ss_limit : BITVEC[20];
State.ss_selector : BITVEC[16];
State.cpl : BITVEC[2];
State.rflags : BITVEC[64];
State.r11 : BITVEC[64];
State.ss_base : BITVEC[32];
State.ss_accessRights : BITVEC[12];
State.EFER : BITVEC[64];
State.cs_base : BITVEC[32];
State.rip : BITVEC[64];
State.cs_selector : BITVEC[16];
State.cs_limit : BITVEC[20];
isCanonical : TRUTH;
State.rcx : BITVEC[64];
State.cs_accessRights : BITVEC[12];

VAR
ss_base : BITVEC[32];
exitStatus: exitCase;
cpl : BITVEC[2];
ss_limit : BITVEC[20];
cs_selector : BITVEC[16];
ss_accessRights : BITVEC[12];
rip : BITVEC[64];
cs_accessRights : BITVEC[12];
cs_base : BITVEC[32];
cs_limit : BITVEC[20];
ss_selector : BITVEC[16];
rflags : BITVEC[64];

CONST
IA32_STAR: BITVEC[64];
operand_size_is_64_bit: TRUTH;

ss_base_i : BITVEC[32];
cpl_i : BITVEC[2];
ss_limit_i : BITVEC[20];
cs_selector_i : BITVEC[16];
ss_accessRights_i : BITVEC[12];
rip_i : BITVEC[64];
cs_accessRights_i : BITVEC[12];
cs_base_i : BITVEC[32];
cs_limit_i : BITVEC[20];
ss_selector_i : BITVEC[16];
rflags_i : BITVEC[64];

DEFINE

zero_bit := ( 0 # [0:0] );
one_bit := ( 1 # [0:0] );
ucl_hex_0 := ( zero_bit @ zero_bit @ zero_bit @ zero_bit);
ucl_hex_1 := ( zero_bit @ zero_bit @ zero_bit @ one_bit);
ucl_hex_2 := ( zero_bit @ zero_bit @ one_bit @ zero_bit);
ucl_hex_3 := ( zero_bit @ zero_bit @ one_bit @ one_bit);
ucl_hex_4 := ( zero_bit @ one_bit @ zero_bit @ zero_bit);
ucl_hex_5 := ( zero_bit @ one_bit @ zero_bit @ one_bit);
ucl_hex_6 := ( zero_bit @ one_bit @ one_bit @ zero_bit);
ucl_hex_7 := ( zero_bit @ one_bit @ one_bit @ one_bit);
ucl_hex_8 := ( one_bit @ zero_bit @ zero_bit @ zero_bit);
ucl_hex_9 := ( one_bit @ zero_bit @ zero_bit @ one_bit);
ucl_hex_a := ( one_bit @ zero_bit @ one_bit @ zero_bit);
ucl_hex_b := ( one_bit @ zero_bit @ one_bit @ one_bit);
ucl_hex_c := ( one_bit @ one_bit @ zero_bit @ zero_bit);
ucl_hex_d := ( one_bit @ one_bit @ zero_bit @ one_bit);
ucl_hex_e := ( one_bit @ one_bit @ one_bit @ zero_bit);
ucl_hex_f := ( one_bit @ one_bit @ one_bit @ one_bit);

RFLAGS := State.rflags;
RCX := State.rcx;
IA32_EFER.SCE := State.EFER # [0:0];
CS.L := State.cs_accessRights # [2:2];
R11 := State.r11;
ECX := State.rcx # [31:0];
CPL := State.cpl;
IA32_EFER.LMA := State.EFER # [10:10];
RIP := State.rip;
CS.G := ( b1 )
SS.DPL := ( (b1)@(b1) )
SS.G := ( b1 )
SS.P := ( b1 )
CS.P := ( b1 )
CS.Type := ( (ucl_hex_b) )
SS.S := ( b1 )
CS.DPL := ( (b1)@(b1) )
SS.Type := ( (ucl_hex_3) )
SS.B := ( b1 )
CS.S := ( b1 )
CS.AVL := State.cs_accessRights # [3:3];
CS.B := State.cs_accessRights # [1:1];
CS.D := State.cs_accessRights # [1:1];
CS.L := State.cs_accessRights # [2:2];
SS.AVL := State.ss_accessRights # [3:3];
SS.D := State.ss_accessRights # [1:1];
SS.L := State.ss_accessRights # [2:2];
CS.L0 := case
    operand_size_is_64_bit : ( b0 );
    operand_size_is_64_bit : ( b1 );
    default : State.cs_accessRights # [2:2];
esac;

CS.L_n := CS.L0;

CS.D0 := case
    operand_size_is_64_bit : ( b1 );
    operand_size_is_64_bit : ( b0 );
    default : State.cs_accessRights # [1:1];
esac;

CS.D_n := CS.D0;

exitStatus0 := case
    CPL != 0 | isCanonical : GP;
    CS.L != 1 | IA32_EFER.LMA != 1 | IA32_EFER.SCE != 1 : UD;
    default : Normal;
esac;

exitStatus_n := exitStatus0;

RIP0 := case
    operand_size_is_64_bit : ( ECX );
    operand_size_is_64_bit : ( RCX );
    default : RIP;
esac;

RIP_n := RIP0;

CS.Selector0 := case
    operand_size_is_64_bit : ( IA32_STAR # [63:48] );
    operand_size_is_64_bit : ( IA32_STAR # [63:48] ) +_16 ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_1) @ (ucl_hex_0) );
    default : State.cs_selector;
esac;

CS.Selector_n := CS.Selector0;

