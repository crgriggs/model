MODULE sysretInstr

INPUT

State.ss_limit : BITVEC[20];
State.ss_selector : BITVEC[16];
State.CPL : BITVEC[2];
State.rflags : BITVEC[64];
State.R11 : BITVEC[64];
State.ss_base : BITVEC[32];
State.ss_accessRights : BITVEC[12];
State.EFER : BITVEC[64];
State.cs_base : BITVEC[32];
State.RIP : BITVEC[64];
State.cs_selector : BITVEC[16];
State.cs_limit : BITVEC[20];
State.RCX : BITVEC[64];
State.cs_accessRights : BITVEC[12];

VAR
ss_base : BITVEC[32];
CPL : BITVEC[2];
ss_limit : BITVEC[20];
cs_selector : BITVEC[16];
ss_accessRights : BITVEC[12];
RIP : BITVEC[64];
cs_accessRights : BITVEC[12];
cs_base : BITVEC[32];
cs_limit : BITVEC[20];
ss_selector : BITVEC[16];
rflags : BITVEC[64];

CONST
IA32_STAR: BITVEC[64];
RCX_is_not_canonical: BITVEC[1];
operand_size_is_64_bit: BITVEC[1];

DEFINE

IA32_EFER.LMA := State.EFER # [10:10];
IA32_EFER.SCE := State.EFER # [0:0];
b0 := 0x0 # [0:0];
b1 := 0x1 # [0:0];
ECX := State.RCX # [31:0];
CS.G := 1;
SS.DPL := 3;
SS.G := 1;
SS.P := 1;
CS.P := 1;
CS.Type := 11;
SS.S := 1;
CS.DPL := 3;
SS.Type := 3;
SS.B := 1;
CS.S := 1;

CS.L0 := case
    operand_size_is_64_bit : 0;
    operand_size_is_64_bit : 1;
    default : State.cs_accessRights # [2:2]
esac;

CS.L_n := CS.L0;

CS.D0 := case
    operand_size_is_64_bit : 1;
    operand_size_is_64_bit : 0;
    default : State.cs_accessRights # [1:1]
esac;

CS.D_n := CS.D0;

exitStatus0 := case
    CPL != 0 || RCX_is_not_canonical : GP;
    CS.L != 1 | IA32_EFER.LMA != 1 | IA32_EFER.SCE != 1 : UD;
    default : Normal;
esac;

exitStatus_n := exitStatus0;

RIP0 := case
    operand_size_is_64_bit : ECX;
    operand_size_is_64_bit : RCX;
    default : State.rip;
esac;

RIP_n := RIP0;

CS.Selector0 := case
    operand_size_is_64_bit : IA32_STAR[63:48];
    operand_size_is_64_bit : IA32_STAR[63:48] + 16;
    default : State.cs_selector;
esac;

CS.Selector_n := CS.Selector0;


ASSIGN

init[ss_base] := 0;
next[ss_base] := case
    next[exitStatus] != UD & next[exitStatus] != GP : 0;
    default : State.ss_base;
esac;

init[exitStatus] := normal;
next[exitStatus] := exitStatus_n;

init[CPL] := 0;
next[CPL] := case
    next[exitStatus] != UD & next[exitStatus] != GP : 3;
    default : State.CPL;
esac;

init[ss_limit] := 0;
next[ss_limit] := case
    next[exitStatus] != UD & next[exitStatus] != GP : FFFFF;
    default : State.ss_limit;
esac;

init[cs_selector] := 0;
next[cs_selector] := case
    next[exitStatus] != UD & next[exitStatus] != GP : CS.Selector_n || 3;
    default : State.cs_selector;
esac;

init[ss_accessRights] := 0;
next[ss_accessRights] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( SS.TYPE ) @ ( SS.S ) @ ( SS.DPL ) @ ( SS.P ) @ ( SS.AVL ) @ ( SS.L ) @ ( SS.D ) @ ( SS.B ) @ ( SS.G );
    default : State.ss_accessRights;
esac;

init[RIP] := 0;
next[RIP] := case
    next[exitStatus] != UD & next[exitStatus] != GP : RIP_n;
    default : State.RIP;
esac;

init[cs_accessRights] := 0;
next[cs_accessRights] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( CS.TYPE ) @ ( CS.S ) @ ( CS.DPL ) @ ( CS.P ) @ ( CS.AVL ) @ ( CS.L_n ) @ ( CS.D_n ) @ ( CS.B ) @ ( CS.G );
    default : State.cs_accessRights;
esac;

init[cs_base] := 0;
next[cs_base] := case
    next[exitStatus] != UD & next[exitStatus] != GP : 0;
    default : State.cs_base;
esac;

init[cs_limit] := 0;
next[cs_limit] := case
    next[exitStatus] != UD & next[exitStatus] != GP : FFFFF;
    default : State.cs_limit;
esac;

init[ss_selector] := 0;
next[ss_selector] := case
    next[exitStatus] != UD & next[exitStatus] != GP : IA32_STAR[63:48] + 8 || 3;
    default : State.ss_selector;
esac;

init[RFLAGS] := 0;
next[RFLAGS] := case
    next[exitStatus] != UD & next[exitStatus] != GP : R11 && 3C7FD7 || 2;
    default : State.RFLAGS;
esac;

