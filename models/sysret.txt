MODULE sysretInstr

INPUT

State.ss_limit : BITVEC[20];
State.ss_selector : BITVEC[16];
State.cpl : BITVEC[2];
State.rflags : BITVEC[64];
State.r11 : BITVEC[64];
State.ss_base : BITVEC[32];
State.ss_accessRights : BITVEC[12];
State.EFER : BITVEC[64];
State.cs_base : BITVEC[32];
State.rip : BITVEC[64];
State.cs_selector : BITVEC[16];
State.cs_limit : BITVEC[20];
isCanonical : TRUTH;
State.rcx : BITVEC[64];
State.cs_accessRights : BITVEC[12];

VAR
ss_base : BITVEC[32];
exitStatus : exitCase;
cpl : BITVEC[2];
ss_limit : BITVEC[20];
cs_selector : BITVEC[16];
ss_accessRights : BITVEC[12];
rip : BITVEC[64];
cs_accessRights : BITVEC[12];
cs_base : BITVEC[32];
cs_limit : BITVEC[20];
ss_selector : BITVEC[16];
rflags : BITVEC[64];

CONST
IA32_STAR: BITVEC[64];
operand_size_is_64_bit: TRUTH;

ss_base_i : BITVEC[32];
cpl_i : BITVEC[2];
ss_limit_i : BITVEC[20];
cs_selector_i : BITVEC[16];
ss_accessRights_i : BITVEC[12];
rip_i : BITVEC[64];
cs_accessRights_i : BITVEC[12];
cs_base_i : BITVEC[32];
cs_limit_i : BITVEC[20];
ss_selector_i : BITVEC[16];
rflags_i : BITVEC[64];

DEFINE

b0 := ( 0 # [0:0] );
b1 := ( 1 # [0:0] );
ucl_hex_0 := ( b0 @ b0 @ b0 @ b0);
ucl_hex_1 := ( b0 @ b0 @ b0 @ b1);
ucl_hex_2 := ( b0 @ b0 @ b1 @ b0);
ucl_hex_3 := ( b0 @ b0 @ b1 @ b1);
ucl_hex_4 := ( b0 @ b1 @ b0 @ b0);
ucl_hex_5 := ( b0 @ b1 @ b0 @ b1);
ucl_hex_6 := ( b0 @ b1 @ b1 @ b0);
ucl_hex_7 := ( b0 @ b1 @ b1 @ b1);
ucl_hex_8 := ( b1 @ b0 @ b0 @ b0);
ucl_hex_9 := ( b1 @ b0 @ b0 @ b1);
ucl_hex_a := ( b1 @ b0 @ b1 @ b0);
ucl_hex_b := ( b1 @ b0 @ b1 @ b1);
ucl_hex_c := ( b1 @ b1 @ b0 @ b0);
ucl_hex_d := ( b1 @ b1 @ b0 @ b1);
ucl_hex_e := ( b1 @ b1 @ b1 @ b0);
ucl_hex_f := ( b1 @ b1 @ b1 @ b1);

RFLAGS := State.rflags;
RCX := State.rcx;
IA32_EFER.SCE := State.EFER # [0:0];
CS.L := State.cs_accessRights # [2:2];
R11 := State.r11;
ECX := State.rcx # [31:0];
CPL := State.cpl;
IA32_EFER.LMA := State.EFER # [10:10];
RIP := State.rip;
CS.G := ( b1 );
SS.DPL := ( (b1)@(b1) );
SS.G := ( b1 );
SS.P := ( b1 );
CS.P := ( b1 );
CS.Type := ( (ucl_hex_b) );
SS.S := ( b1 );
CS.DPL := ( (b1)@(b1) );
SS.Type := ( (ucl_hex_3) );
SS.B := ( b1 );
CS.S := ( b1 );
CS.AVL := State.cs_accessRights # [3:3];
CS.B := State.cs_accessRights # [1:1];
CS.D := State.cs_accessRights # [1:1];
CS.L := State.cs_accessRights # [2:2];
SS.AVL := State.ss_accessRights # [3:3];
SS.D := State.ss_accessRights # [1:1];
SS.L := State.ss_accessRights # [2:2];
CS.L0 := case
    operand_size_is_64_bit : ( b0 );
    operand_size_is_64_bit : ( b1 );
    default : State.cs_accessRights # [2:2];
esac;

CS.L_n := CS.L0;

CS.D0 := case
    operand_size_is_64_bit : ( b1 );
    operand_size_is_64_bit : ( b0 );
    default : State.cs_accessRights # [1:1];
esac;

CS.D_n := CS.D0;

exitStatus0 := case
    CPL != (b0)@(b0) | isCanonical : GP;
    CS.L != b1 | IA32_EFER.LMA != b1 | IA32_EFER.SCE != b1 : UD;
    default : Normal;
esac;

exitStatus_n := exitStatus0;

RIP0 := case
    operand_size_is_64_bit : ( ECX );
    operand_size_is_64_bit : ( RCX );
    default : RIP;
esac;

RIP_n := RIP0;

CS.Selector0 := case
    operand_size_is_64_bit : ( IA32_STAR # [63:48] );
    operand_size_is_64_bit : ( IA32_STAR # [63:48] ) +_16 ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_1) @ (ucl_hex_0) );
    default : State.cs_selector;
esac;

CS.Selector_n := CS.Selector0;


ASSIGN

init[ss_base] := ss_base_i;
next[ss_base] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) );
    default : State.ss_base;
esac;

init[exitStatus] := Normal;
next[exitStatus] := exitStatus_n;

init[cpl] := cpl_i;
next[cpl] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( (b1)@(b1) );
    default : State.cpl;
esac;

init[ss_limit] := ss_limit_i;
next[ss_limit] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) );
    default : State.ss_limit;
esac;

init[cs_selector] := cs_selector_i;
next[cs_selector] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( CS.Selector_n ) || ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_3) );
    default : State.cs_selector;
esac;

init[ss_accessRights] := ss_accessRights_i;
next[ss_accessRights] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( ( SS.Type ) ) @ ( ( SS.S ) ) @ ( ( SS.DPL ) ) @ ( ( SS.P ) ) @ ( ( SS.AVL ) ) @ ( ( SS.L ) ) @ ( ( SS.D ) ) @ ( ( SS.B ) ) @ ( ( SS.G ) );
    default : State.ss_accessRights;
esac;

init[rip] := rip_i;
next[rip] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( RIP_n );
    default : State.rip;
esac;

init[cs_accessRights] := cs_accessRights_i;
next[cs_accessRights] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( ( CS.Type ) ) @ ( ( CS.S ) ) @ ( ( CS.DPL ) ) @ ( ( CS.P ) ) @ ( ( CS.AVL ) ) @ ( ( CS.L_n ) ) @ ( ( CS.D_n ) ) @ ( ( CS.B ) ) @ ( ( CS.G ) );
    default : State.cs_accessRights;
esac;

init[cs_base] := cs_base_i;
next[cs_base] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) );
    default : State.cs_base;
esac;

init[cs_limit] := cs_limit_i;
next[cs_limit] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) );
    default : State.cs_limit;
esac;

init[ss_selector] := ss_selector_i;
next[ss_selector] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( IA32_STAR # [63:48] ) +_16 ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_8) ) || ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_3) );
    default : State.ss_selector;
esac;

init[rflags] := rflags_i;
next[rflags] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( R11 ) && ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_3) @ (ucl_hex_c) @ (ucl_hex_7) @ (ucl_hex_f) @ (ucl_hex_d) @ (ucl_hex_7) ) || ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_2) );
    default : State.rflags;
esac;

