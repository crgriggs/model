MODULE popInstr

INPUT

State.rsp : BITVEC[64];
State.memory : FUNC[1];

VAR
DEST : BITVEC[64];
StackAddrSize : size;
rsp : BITVEC[64];
OperandSize : size;

CONST

DEST_i : BITVEC[64];
rsp_i : BITVEC[64];

DEFINE

zero_bit := ( 0 # [0:0] );
one_bit := ( 1 # [0:0] );
ucl_hex_0 := ( zero_bit @ zero_bit @ zero_bit @ zero_bit);
ucl_hex_1 := ( zero_bit @ zero_bit @ zero_bit @ one_bit);
ucl_hex_2 := ( zero_bit @ zero_bit @ one_bit @ zero_bit);
ucl_hex_3 := ( zero_bit @ zero_bit @ one_bit @ one_bit);
ucl_hex_4 := ( zero_bit @ one_bit @ zero_bit @ zero_bit);
ucl_hex_5 := ( zero_bit @ one_bit @ zero_bit @ one_bit);
ucl_hex_6 := ( zero_bit @ one_bit @ one_bit @ zero_bit);
ucl_hex_7 := ( zero_bit @ one_bit @ one_bit @ one_bit);
ucl_hex_8 := ( one_bit @ zero_bit @ zero_bit @ zero_bit);
ucl_hex_9 := ( one_bit @ zero_bit @ zero_bit @ one_bit);
ucl_hex_a := ( one_bit @ zero_bit @ one_bit @ zero_bit);
ucl_hex_b := ( one_bit @ zero_bit @ one_bit @ one_bit);
ucl_hex_c := ( one_bit @ one_bit @ zero_bit @ zero_bit);
ucl_hex_d := ( one_bit @ one_bit @ zero_bit @ one_bit);
ucl_hex_e := ( one_bit @ one_bit @ one_bit @ zero_bit);
ucl_hex_f := ( one_bit @ one_bit @ one_bit @ one_bit);

RSP := State.rsp;
ESP := State.rsp # [31:0];
SP := State.rsp # [15:0];
DEST0 := case
    OperandSize != bits32 & (StackAddrSize = bits32) : State.memory(ESP);
    OperandSize = bits32 & StackAddrSize = bits32 : State.memory(ESP);
    OperandSize != bits64 & (StackAddrSize = bits64 & StackAddrSize != bits32) : State.memory(RSP);
    OperandSize = bits64 & StackAddrSize = bits64 & StackAddrSize != bits32 : State.memory(RSP);
    OperandSize != bits16 & (StackAddrSize != bits64 & (StackAddrSize != bits32)) : State.memory(SP);
    OperandSize = bits16 & StackAddrSize != bits64 & (StackAddrSize != bits32) : State.memory(SP);
    default : DEST;
esac;

DEST_n := DEST0;

SP0 := case
    OperandSize = bits16 & StackAddrSize != bits64 & (StackAddrSize != bits32) : SP + 2;
    OperandSize != bits16 & (StackAddrSize != bits64 & (StackAddrSize != bits32)) : SP + 4;
    default : SP;
esac;

SP_n := SP0;

RSP0 := case
    OperandSize != bits64 & (StackAddrSize = bits64 & StackAddrSize != bits32) : ( RSP ) +_64 ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_2) );
    OperandSize = bits64 & StackAddrSize = bits64 & StackAddrSize != bits32 : ( RSP ) +_64 ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_8) );
    default : RSP;
esac;

RSP_n := RSP0;

ESP0 := case
    OperandSize = bits32 & StackAddrSize = bits32 : ESP + 4;
    OperandSize != bits32 & (StackAddrSize = bits32) : ESP + 2;
    default : ESP;
esac;

ESP_n := ESP0;

