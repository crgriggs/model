MODULE popInstr

INPUT

State.rsp : BITVEC[64];
State.memory : FUNC[1];

VAR
DEST : BITVEC[64];
StackAddrSize : size;
rsp : BITVEC[64];
OperandSize : size;

CONST

DEST_i : BITVEC[64];
rsp_i : BITVEC[64];

DEFINE

RSP := State.rsp;
b0 := 0x0 # [0:0];
SP := State.rsp # [15:0];
b1 := 0x1 # [0:0];
ESP := State.rsp # [31:0];
DEST0 := case
    OperandSize != bits32 & (StackAddrSize = bits32) : State.memory(ESP);
    OperandSize = bits32 & StackAddrSize = bits32 : State.memory(ESP);
    OperandSize != bits64 & (StackAddrSize = bits64 & StackAddrSize != bits32) : State.memory(RSP);
    OperandSize = bits64 & StackAddrSize = bits64 & StackAddrSize != bits32 : State.memory(RSP);
    OperandSize != bits16 & (StackAddrSize != bits64 & (StackAddrSize != bits32)) : State.memory(SP);
    OperandSize = bits16 & StackAddrSize != bits64 & (StackAddrSize != bits32) : State.memory(SP);
    default : DEST;
esac;

DEST_n := DEST0;

SP0 := case
    OperandSize = bits16 & StackAddrSize != bits64 & (StackAddrSize != bits32) : SP + 2;
    OperandSize != bits16 & (StackAddrSize != bits64 & (StackAddrSize != bits32)) : SP + 4;
    default : SP;
esac;

SP_n := SP0;

RSP0 := case
    OperandSize != bits64 & (StackAddrSize = bits64 & StackAddrSize != bits32) : RSP + 2;
    OperandSize = bits64 & StackAddrSize = bits64 & StackAddrSize != bits32 : RSP + 8;
    default : RSP;
esac;

RSP_n := RSP0;

ESP0 := case
    OperandSize = bits32 & StackAddrSize = bits32 : ESP + 4;
    OperandSize != bits32 & (StackAddrSize = bits32) : ESP + 2;
    default : ESP;
esac;

ESP_n := ESP0;


ASSIGN

init[DEST] := DEST_i;
next[DEST] := DEST_n;

init[StackAddrSize] := {bits64, bits32, bits16};
next[StackAddrSize] := {bits64, bits32, bits16};

init[rsp] := rsp_i;
next[rsp] := RSP_n;

init[OperandSize] := {bits64, bits32, bits16};
next[OperandSize] := {bits64, bits32, bits16};

