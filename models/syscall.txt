MODULE psuedocode\syscall

INPUT

State.ss_limit : BITVEC[20];
State.ss_selector : BITVEC[16];
State.RCX : BITVEC[64];
State.rflags : BITVEC[64];
State.R11 : BITVEC[64];
State.ss_base : BITVEC[32];
State.ss_accessRights : BITVEC[12];
State.EFER : BITVEC[64];
State.cs_base : BITVEC[32];
State.RIP : BITVEC[64];
State.cs_selector : BITVEC[16];
State.cs_limit : BITVEC[20];
State.CPL : BITVEC[2];
State.cs_accessRights : BITVEC[12];

VAR
ss_base : [32];
RCX : [64];
R11 : [64];
ss_limit : [20];
cs_selector : [16];
ss_accessRights : [12];
RIP : [64];
cs_accessRights : [12];
cs_base : [32];
cs_limit : [20];
CPL : [2];
ss_selector : [16];
rflags : [64];

CONST
IA32_FMASK: BITVEC[64];
rflags_rfLAGS: BITVEC[64];
IA32_LSTAR: BITVEC[64];
IA32_STAR: BITVEC[64];

DEFINE

IA32_EFER.LMA := State.EFER # [10:10]
b0 := 0x0 # [0:0];
b1 := 0x1 # [0:0];
IA32_EFER.SCE := State.EFER # [0:0]
CS.G := 1
SS.DPL := 0
SS.G := 1
SS.P := 1
CS.P := 1
CS.L := 1
CS.Type := 11
CS.D := 0
SS.S := 1
CS.DPL := 0
SS.Type := 3
SS.B := 1
CS.S := 1


ASSIGN

init[ss_base] := 0;
next[ss_base] := case
    next[exitStatus] != UD : 0;
    default : State.ss_base;
esac;

init[exitStatus] := 0;
next[exitStatus] := case
    CS.L != 1 | IA32_EFER.LMA != 1 | IA32_EFER.SCE != 1 : UD;
    default : normal;
esac;

init[RCX] := 0;
next[RCX] := case
    next[exitStatus] != UD : RIP;
    default : State.RCX;
esac;

init[R11] := 0;
next[R11] := case
    next[exitStatus] != UD : rflags_rfLAGS;
    default : State.R11;
esac;

init[ss_limit] := 0;
next[ss_limit] := case
    next[exitStatus] != UD : FFFFF;
    default : State.ss_limit;
esac;

init[cs_selector] := 0;
next[cs_selector] := case
    next[exitStatus] != UD : IA32_STAR[47:32] && FFFC;
    default : State.cs_selector;
esac;

init[ss_accessRights] := 0;
next[ss_accessRights] := case
    next[exitStatus] != UD : ( SS.TYPE ) @ ( SS.S ) @ ( SS.DPL ) @ ( SS.P ) @ ( SS.AVL ) @ ( SS.L ) @ ( SS.D ) @ ( SS.B ) @ ( SS.G );
    default : State.ss_accessRights;
esac;

init[RIP] := 0;
next[RIP] := case
    next[exitStatus] != UD : IA32_LSTAR;
    default : State.RIP;
esac;

init[cs_accessRights] := 0;
next[cs_accessRights] := case
    next[exitStatus] != UD : ( CS.TYPE ) @ ( CS.S ) @ ( CS.DPL ) @ ( CS.P ) @ ( CS.AVL ) @ ( CS.L ) @ ( CS.D ) @ ( CS.B ) @ ( CS.G );
    default : State.cs_accessRights;
esac;

init[cs_base] := 0;
next[cs_base] := case
    next[exitStatus] != UD : 0;
    default : State.cs_base;
esac;

init[cs_limit] := 0;
next[cs_limit] := case
    next[exitStatus] != UD : FFFFF;
    default : State.cs_limit;
esac;

init[CPL] := 0;
next[CPL] := case
    next[exitStatus] != UD : 0;
    default : State.CPL;
esac;

init[ss_selector] := 0;
next[ss_selector] := case
    next[exitStatus] != UD : IA32_STAR[47:32] + 8;
    default : State.ss_selector;
esac;

init[RFLAGS] := 0;
next[RFLAGS] := case
    next[exitStatus] != UD : rflags_rfLAGS && !!IA32_FMASK;
    default : State.RFLAGS;
esac;

