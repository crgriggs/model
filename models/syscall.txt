MODULE syscallInstr

INPUT

State.ss_limit : BITVEC[20];
State.ss_selector : BITVEC[16];
State.rcx : BITVEC[64];
State.rflags : BITVEC[64];
State.r11 : BITVEC[64];
State.ss_base : BITVEC[32];
State.ss_accessRights : BITVEC[12];
State.EFER : BITVEC[64];
State.cs_base : BITVEC[32];
State.rip : BITVEC[64];
State.cs_selector : BITVEC[16];
State.cs_limit : BITVEC[20];
State.cpl : BITVEC[2];
State.cs_accessRights : BITVEC[12];

VAR
ss_base : BITVEC[32];
exitStatus: exitCase;
rcx : BITVEC[64];
r11 : BITVEC[64];
ss_limit : BITVEC[20];
cs_selector : BITVEC[16];
ss_accessRights : BITVEC[12];
rip : BITVEC[64];
cs_accessRights : BITVEC[12];
cs_base : BITVEC[32];
cs_limit : BITVEC[20];
cpl : BITVEC[2];
ss_selector : BITVEC[16];
rflags : BITVEC[64];

CONST
IA32_FMASK: BITVEC[64];
rflags_rfLAGS: BITVEC[64];
IA32_LSTAR: BITVEC[64];
IA32_STAR: BITVEC[64];

DEFINE

RFLAGS := State.rflags;
b0 := 0x0 # [0:0];
RCX := State.rcx;
IA32_EFER.SCE := State.EFER # [0:0];
CS.L := State.cs_accessRights # [2:2];
b1 := 0x1 # [0:0];
R11 := State.r11;
CPL := State.cpl;
IA32_EFER.LMA := State.EFER # [10:10];
RIP := State.rip;
CS.G := 1;
SS.DPL := 0;
SS.G := 1;
SS.P := 1;
CS.P := 1;
CS.L := 1;
CS.Type := 11;
CS.D := 0;
SS.S := 1;
CS.DPL := 0;
SS.Type := 3;
SS.B := 1;
CS.S := 1;
CS.AVL := State.cs_accessRights # [3:3];
CS.B := State.cs_accessRights # [1:1];
SS.AVL := State.ss_accessRights # [3:3];
SS.D := State.ss_accessRights # [1:1];
SS.L := State.ss_accessRights # [2:2];

ASSIGN

init[ss_base] := 0;
next[ss_base] := case
    next[exitStatus] != UD : 0;
    default : State.ss_base;
esac;

init[exitStatus] := Normal;
next[exitStatus] := case
    CS.L != 1 | IA32_EFER.LMA != 1 | IA32_EFER.SCE != 1 : UD;
    default : Normal;
esac;

init[rcx] := 0;
next[rcx] := case
    next[exitStatus] != UD : RIP;
    default : State.rcx;
esac;

init[r11] := 0;
next[r11] := case
    next[exitStatus] != UD : rflags_rfLAGS;
    default : State.r11;
esac;

init[ss_limit] := 0;
next[ss_limit] := case
    next[exitStatus] != UD : 0xFFFFF;
    default : State.ss_limit;
esac;

init[cs_selector] := 0;
next[cs_selector] := case
    next[exitStatus] != UD : IA32_STAR # [47:32] && 0xFFFC;
    default : State.cs_selector;
esac;

init[ss_accessRights] := 0;
next[ss_accessRights] := case
    next[exitStatus] != UD : ( SS.Type ) @ ( SS.S ) @ ( SS.DPL ) @ ( SS.P ) @ ( SS.AVL ) @ ( SS.L ) @ ( SS.D ) @ ( SS.B ) @ ( SS.G );
    default : State.ss_accessRights;
esac;

init[rip] := 0;
next[rip] := case
    next[exitStatus] != UD : IA32_LSTAR;
    default : State.rip;
esac;

init[cs_accessRights] := 0;
next[cs_accessRights] := case
    next[exitStatus] != UD : ( CS.Type ) @ ( CS.S ) @ ( CS.DPL ) @ ( CS.P ) @ ( CS.AVL ) @ ( CS.L ) @ ( CS.D ) @ ( CS.B ) @ ( CS.G );
    default : State.cs_accessRights;
esac;

init[cs_base] := 0;
next[cs_base] := case
    next[exitStatus] != UD : 0;
    default : State.cs_base;
esac;

init[cs_limit] := 0;
next[cs_limit] := case
    next[exitStatus] != UD : 0xFFFFF;
    default : State.cs_limit;
esac;

init[cpl] := 0;
next[cpl] := case
    next[exitStatus] != UD : 0;
    default : State.cpl;
esac;

init[ss_selector] := 0;
next[ss_selector] := case
    next[exitStatus] != UD : IA32_STAR # [47:32] + 8;
    default : State.ss_selector;
esac;

init[rflags] := 0;
next[rflags] := case
    next[exitStatus] != UD : rflags_rfLAGS && !!IA32_FMASK;
    default : State.rflags;
esac;

