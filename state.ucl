MODEL StateModel

typedef opcode : enum{mov, syscall, sysret};
typedef exitStatus : enum {gp, ud, normal};
typedef register : enum {rax, rbx, rcx, rdx};

CONST(*----- ./models//mov.txt -----*)
MODULE mov

INPUT


VAR
DEST : [64];

CONST
DEST: BITVEC[64];
SRC: BITVEC[64];

DEFINE

b0 := 0x0 # [0:0];
b1 := 0x1 # [0:0];


ASSIGN

init[DEST] := 0;
next[DEST] := SRC;


(*----- ./models//syscall.txt -----*)
MODULE syscall

INPUT

State.ss_limit : BITVEC[20];
State.ss_selector : BITVEC[16];
State.RCX : BITVEC[64];
State.rflags : BITVEC[64];
State.R11 : BITVEC[64];
State.ss_base : BITVEC[32];
State.ss_accessRights : BITVEC[12];
State.EFER : BITVEC[64];
State.cs_base : BITVEC[32];
State.RIP : BITVEC[64];
State.cs_selector : BITVEC[16];
State.cs_limit : BITVEC[20];
State.CPL : BITVEC[2];
State.cs_accessRights : BITVEC[12];

VAR
ss_base : [32];
RCX : [64];
R11 : [64];
ss_limit : [20];
cs_selector : [16];
ss_accessRights : [12];
RIP : [64];
cs_accessRights : [12];
cs_base : [32];
cs_limit : [20];
CPL : [2];
ss_selector : [16];
rflags : [64];

CONST
IA32_FMASK: BITVEC[64];
rflags_rfLAGS: BITVEC[64];
IA32_LSTAR: BITVEC[64];
IA32_STAR: BITVEC[64];

DEFINE

IA32_EFER.LMA := State.EFER # [10:10]
b0 := 0x0 # [0:0];
b1 := 0x1 # [0:0];
IA32_EFER.SCE := State.EFER # [0:0]
CS.G := 1
SS.DPL := 0
SS.G := 1
SS.P := 1
CS.P := 1
CS.L := 1
CS.Type := 11
CS.D := 0
SS.S := 1
CS.DPL := 0
SS.Type := 3
SS.B := 1
CS.S := 1


ASSIGN

init[ss_base] := 0;
next[ss_base] := case
    next[exitStatus] != UD : 0;
    default : State.ss_base;
esac;

init[exitStatus] := 0;
next[exitStatus] := case
    CS.L != 1 | IA32_EFER.LMA != 1 | IA32_EFER.SCE != 1 : UD;
    default : normal;
esac;

init[RCX] := 0;
next[RCX] := case
    next[exitStatus] != UD : RIP;
    default : State.RCX;
esac;

init[R11] := 0;
next[R11] := case
    next[exitStatus] != UD : rflags_rfLAGS;
    default : State.R11;
esac;

init[ss_limit] := 0;
next[ss_limit] := case
    next[exitStatus] != UD : FFFFF;
    default : State.ss_limit;
esac;

init[cs_selector] := 0;
next[cs_selector] := case
    next[exitStatus] != UD : IA32_STAR[47:32] && FFFC;
    default : State.cs_selector;
esac;

init[ss_accessRights] := 0;
next[ss_accessRights] := case
    next[exitStatus] != UD : ( SS.TYPE ) @ ( SS.S ) @ ( SS.DPL ) @ ( SS.P ) @ ( SS.AVL ) @ ( SS.L ) @ ( SS.D ) @ ( SS.B ) @ ( SS.G );
    default : State.ss_accessRights;
esac;

init[RIP] := 0;
next[RIP] := case
    next[exitStatus] != UD : IA32_LSTAR;
    default : State.RIP;
esac;

init[cs_accessRights] := 0;
next[cs_accessRights] := case
    next[exitStatus] != UD : ( CS.TYPE ) @ ( CS.S ) @ ( CS.DPL ) @ ( CS.P ) @ ( CS.AVL ) @ ( CS.L ) @ ( CS.D ) @ ( CS.B ) @ ( CS.G );
    default : State.cs_accessRights;
esac;

init[cs_base] := 0;
next[cs_base] := case
    next[exitStatus] != UD : 0;
    default : State.cs_base;
esac;

init[cs_limit] := 0;
next[cs_limit] := case
    next[exitStatus] != UD : FFFFF;
    default : State.cs_limit;
esac;

init[CPL] := 0;
next[CPL] := case
    next[exitStatus] != UD : 0;
    default : State.CPL;
esac;

init[ss_selector] := 0;
next[ss_selector] := case
    next[exitStatus] != UD : IA32_STAR[47:32] + 8;
    default : State.ss_selector;
esac;

init[RFLAGS] := 0;
next[RFLAGS] := case
    next[exitStatus] != UD : rflags_rfLAGS && !!IA32_FMASK;
    default : State.RFLAGS;
esac;


(*----- ./models//sysret.txt -----*)
MODULE sysret

INPUT

State.ss_limit : BITVEC[20];
State.ss_selector : BITVEC[16];
State.CPL : BITVEC[2];
State.rflags : BITVEC[64];
State.R11 : BITVEC[64];
State.ss_base : BITVEC[32];
State.ss_accessRights : BITVEC[12];
State.EFER : BITVEC[64];
State.cs_base : BITVEC[32];
State.RIP : BITVEC[64];
State.cs_selector : BITVEC[16];
State.cs_limit : BITVEC[20];
State.RCX : BITVEC[64];
State.cs_accessRights : BITVEC[12];

VAR
ss_base : [32];
CPL : [2];
ss_limit : [20];
cs_selector : [16];
ss_accessRights : [12];
RIP : [64];
cs_accessRights : [12];
cs_base : [32];
cs_limit : [20];
ss_selector : [16];
rflags : [64];

CONST
IA32_STAR: BITVEC[64];
RCX_is_not_canonical: BITVEC[1];
operand_size_is_64_bit: BITVEC[1];

DEFINE

IA32_EFER.LMA := State.EFER # [10:10]
b0 := 0x0 # [0:0];
ECX := State.RCX # [31:0];
b1 := 0x1 # [0:0];
IA32_EFER.SCE := State.EFER # [0:0]
CS.G := 1
SS.DPL := 3
SS.G := 1
SS.P := 1
CS.P := 1
CS.Type := 11
SS.S := 1
CS.DPL := 3
SS.Type := 3
SS.B := 1
CS.S := 1

CS.L0 := case
    operand_size_is_64_bit : 0;
    operand_size_is_64_bit : 1;
    default : State.cs_accessRights # [2:2]
esac;

CS.L_n := CS.L0;

CS.D0 := case
    operand_size_is_64_bit : 1;
    operand_size_is_64_bit : 0;
    default : State.cs_accessRights # [1:1]
esac;

CS.D_n := CS.D0;

exitStatus0 := case
    CPL != 0 || RCX_is_not_canonical : GP;
    CS.L != 1 | IA32_EFER.LMA != 1 | IA32_EFER.SCE != 1 : UD;
    default : Normal;
esac;

exitStatus_n := exitStatus0;

RIP0 := case
    operand_size_is_64_bit : ECX;
    operand_size_is_64_bit : RCX;
    default : State.rip
esac;

RIP_n := RIP0;

CS.Selector0 := case
    operand_size_is_64_bit : IA32_STAR[63:48];
    operand_size_is_64_bit : IA32_STAR[63:48] + 16;
    default : State.cs_selector
esac;

CS.Selector_n := CS.Selector0;


ASSIGN

init[ss_base] := 0;
next[ss_base] := case
    next[exitStatus] != UD & next[exitStatus] != GP : 0;
    default : State.ss_base;
esac;

init[exitStatus] := normal;
next[exitStatus] := exitStatus_n;

init[CPL] := 0;
next[CPL] := case
    next[exitStatus] != UD & next[exitStatus] != GP : 3;
    default : State.CPL;
esac;

init[ss_limit] := 0;
next[ss_limit] := case
    next[exitStatus] != UD & next[exitStatus] != GP : FFFFF;
    default : State.ss_limit;
esac;

init[cs_selector] := 0;
next[cs_selector] := case
    next[exitStatus] != UD & next[exitStatus] != GP : CS.Selector_n || 3;
    default : State.cs_selector;
esac;

init[ss_accessRights] := 0;
next[ss_accessRights] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( SS.TYPE ) @ ( SS.S ) @ ( SS.DPL ) @ ( SS.P ) @ ( SS.AVL ) @ ( SS.L ) @ ( SS.D ) @ ( SS.B ) @ ( SS.G );
    default : State.ss_accessRights;
esac;

init[RIP] := 0;
next[RIP] := case
    next[exitStatus] != UD & next[exitStatus] != GP : RIP_n;
    default : State.RIP;
esac;

init[cs_accessRights] := 0;
next[cs_accessRights] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( CS.TYPE ) @ ( CS.S ) @ ( CS.DPL ) @ ( CS.P ) @ ( CS.AVL ) @ ( CS.L_n ) @ ( CS.D_n ) @ ( CS.B ) @ ( CS.G );
    default : State.cs_accessRights;
esac;

init[cs_base] := 0;
next[cs_base] := case
    next[exitStatus] != UD & next[exitStatus] != GP : 0;
    default : State.cs_base;
esac;

init[cs_limit] := 0;
next[cs_limit] := case
    next[exitStatus] != UD & next[exitStatus] != GP : FFFFF;
    default : State.cs_limit;
esac;

init[ss_selector] := 0;
next[ss_selector] := case
    next[exitStatus] != UD & next[exitStatus] != GP : IA32_STAR[63:48] + 8 || 3;
    default : State.ss_selector;
esac;

init[RFLAGS] := 0;
next[RFLAGS] := case
    next[exitStatus] != UD & next[exitStatus] != GP : R11 && 3C7FD7 || 2;
    default : State.RFLAGS;
esac;


(*----- state/vars.txt -----*)
MODULE State

INPUT

VAR
ss_limit : BITVEC[20];
ss_selector : BITVEC[16];
rax : BITVEC[64];
rbx : BITVEC[64];
rcx : BITVEC[64];
rdx : BITVEC[64];
rflags : BITVEC[64];
r11 : BITVEC[64];
ss_base : BITVEC[32];
ss_accessRights : BITVEC[12];
EFER : BITVEC[64];
cs_base : BITVEC[32];
RIP : BITVEC[64];
cs_selector : BITVEC[16];
cs_limit : BITVEC[20];
CPL : BITVEC[2];
cs_accessRights : BITVEC[12];
CR0 : BITVEC[64];
CR4 : BITVEC[64];
currentReg : register;

CONST

DEFINE

ASSIGN

init[currentReg] := {rax, rbx, rcx, rdx};
next[currentReg] :={rax, rbx, rcx, rdx};


init[ss_limit] := 0;
next[ss_limit] := case
    opcode = syscall : syscall.ss_limit;
    opcode = sysret : sysret.ss_limit;
    default = ss_limit
esac;

init[ss_accessRights] := 0;
next[ss_accessRights] := case
    opcode = syscall : syscall.ss_accessRights;
    opcode = sysret : sysret.ss_accessRights;
    default = ss_accessRights
esac;

init[rcx] := 0;
next[rcx] := case
    opcode = mov & currentReg = rcx : mov.rcx;
    default = rcx
esac;

init[cs_accessRights] := 0;
next[cs_accessRights] := case
    opcode = syscall : syscall.cs_accessRights;
    opcode = sysret : sysret.cs_accessRights;
    default = cs_accessRights
esac;

init[CR4] := 0;
next[CR4] := case
    default = CR4
esac;

init[rbx] := 0;
next[rbx] := case
    opcode = mov & currentReg = rbx : mov.rbx;
    default = rbx
esac;

init[ss_base] := 0;
next[ss_base] := case
    opcode = syscall : syscall.ss_base;
    opcode = sysret : sysret.ss_base;
    default = ss_base
esac;

init[cs_base] := 0;
next[cs_base] := case
    opcode = syscall : syscall.cs_base;
    opcode = sysret : sysret.cs_base;
    default = cs_base
esac;

init[R11] := 0;
next[R11] := case
    opcode = syscall : syscall.R11;
    default = R11
esac;

init[EFER] := 0;
next[EFER] := case
    default = EFER
esac;

init[ss_selector] := 0;
next[ss_selector] := case
    opcode = syscall : syscall.ss_selector;
    opcode = sysret : sysret.ss_selector;
    default = ss_selector
esac;

init[RIP] := 0;
next[RIP] := case
    opcode = syscall : syscall.RIP;
    opcode = sysret : sysret.RIP;
    default = RIP
esac;

init[currentReg] := 0;
next[currentReg] := case
    default = currentReg
esac;

init[cs_limit] := 0;
next[cs_limit] := case
    opcode = syscall : syscall.cs_limit;
    opcode = sysret : sysret.cs_limit;
    default = cs_limit
esac;

init[rdx] := 0;
next[rdx] := case
    opcode = mov & currentReg = rdx : mov.rdx;
    default = rdx
esac;

init[cs_selector] := 0;
next[cs_selector] := case
    opcode = syscall : syscall.cs_selector;
    opcode = sysret : sysret.cs_selector;
    default = cs_selector
esac;

init[CR0] := 0;
next[CR0] := case
    default = CR0
esac;

init[CPL] := 0;
next[CPL] := case
    opcode = syscall : syscall.CPL;
    opcode = sysret : sysret.CPL;
    default = CPL
esac;

init[rflags] := 0;
next[rflags] := case
    opcode = syscall : syscall.rflags;
    opcode = sysret : sysret.rflags;
    default = rflags
esac;

init[rax] := 0;
next[rax] := case
    opcode = mov & currentReg = rax : mov.rax;
    default = rax
esac;

(*----- state/control.txt -----*)
(* ----- CONTROL MODULE ----- *)
CONTROL

EXTVAR
(* Controlling values at each step:
 * A variable must be declared here with a type and default value in order to
 * control its value at each step. Then, in the EXEC section, set the value for
 * a simulation step like this:
 *     var[0] := value;
 *)

STOREVAR

VAR

CONST

DEFINE

EXEC
(* To keep output clean and to keep test and assertions from interfering with
 * eachother, only uncomment one of the blocks below:
 *)

(* Test the case statement for cs_selector *)
(*
instruction_opcode[0] := syscall;
instruction_opcode[1] := sysret;
simulate(1);
decide(State.cs_selector = syscallInst.cs_selector);
simulate(1);
decide(State.cs_selector = sysretInst.cs_selector);
*)

(* Make sure exception_raised forces the next instruction to "exception" *)
(*
simulate(1);
simulate(1);
decide(State.prev_exception_raised => State.instruction_opcode = exception);
*)

(* Privileged exception handlers must run with ring0 stack.
 * This is the OS expectation that exposed the sysret bug.
 *)
simulate(1);
simulate(1);
simulate(1);
decide(
    (
     (State.IA32_EFER_LMA = 1) &
     (State.IA32_EFER_SCE = 1) &
     (State.cs_l = 1) &
     (State.prev_prev_cpl = sys) &
     (State.prev_instruction_opcode = exception))
    => State.rsp = sys
);
