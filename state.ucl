MODEL StateModel

typedef opcodes : enum{add, wrmsr, inc, sysret, dec, push, wrsmr, adc, and, mov, out, pop, syscall};
typedef exitCase : enum {GP, UD, Normal};
typedef register : enum {a, b, c, d};
typedef cacheType : enum {uncacheable, cacheable, writeBack};
typedef size : enum {bits64, bits32, bits16};

CONST
isCanonical : PRED[1]; (* Predicate to decide whether is canonical or not *)
(*----- ./models//add.txt -----*)
MODULE addInstr

INPUT


VAR
DEST : BITVEC[64];
SRC : BITVEC[64];

CONST
RNG: BITVECFUNC[64];

DEST_i : BITVEC[64];
SRC_i : BITVEC[64];

DEFINE

b0 := ( 0 # [0:0] );
b1 := ( 1 # [0:0] );
ucl_hex_0 := ( b0 @ b0 @ b0 @ b0);
ucl_hex_1 := ( b0 @ b0 @ b0 @ b1);
ucl_hex_2 := ( b0 @ b0 @ b1 @ b0);
ucl_hex_3 := ( b0 @ b0 @ b1 @ b1);
ucl_hex_4 := ( b0 @ b1 @ b0 @ b0);
ucl_hex_5 := ( b0 @ b1 @ b0 @ b1);
ucl_hex_6 := ( b0 @ b1 @ b1 @ b0);
ucl_hex_7 := ( b0 @ b1 @ b1 @ b1);
ucl_hex_8 := ( b1 @ b0 @ b0 @ b0);
ucl_hex_9 := ( b1 @ b0 @ b0 @ b1);
ucl_hex_a := ( b1 @ b0 @ b1 @ b0);
ucl_hex_b := ( b1 @ b0 @ b1 @ b1);
ucl_hex_c := ( b1 @ b1 @ b0 @ b0);
ucl_hex_d := ( b1 @ b1 @ b0 @ b1);
ucl_hex_e := ( b1 @ b1 @ b1 @ b0);
ucl_hex_f := ( b1 @ b1 @ b1 @ b1);


ASSIGN

init[DEST] := DEST_i;
next[DEST] := DEST +_64 SRC;



init[SRC] := SRC_i;
next[SRC] := RNG(SRC);


(*----- ./models//wrmsr.txt -----*)
MODULE wrmsrInstr

INPUT

State.rcx : BITVEC[64];
State.rdx : BITVEC[64];

VAR
rcx : BITVEC[64];

CONST

rcx_i : BITVEC[64];

DEFINE

b0 := ( 0 # [0:0] );
b1 := ( 1 # [0:0] );
ucl_hex_0 := ( b0 @ b0 @ b0 @ b0);
ucl_hex_1 := ( b0 @ b0 @ b0 @ b1);
ucl_hex_2 := ( b0 @ b0 @ b1 @ b0);
ucl_hex_3 := ( b0 @ b0 @ b1 @ b1);
ucl_hex_4 := ( b0 @ b1 @ b0 @ b0);
ucl_hex_5 := ( b0 @ b1 @ b0 @ b1);
ucl_hex_6 := ( b0 @ b1 @ b1 @ b0);
ucl_hex_7 := ( b0 @ b1 @ b1 @ b1);
ucl_hex_8 := ( b1 @ b0 @ b0 @ b0);
ucl_hex_9 := ( b1 @ b0 @ b0 @ b1);
ucl_hex_a := ( b1 @ b0 @ b1 @ b0);
ucl_hex_b := ( b1 @ b0 @ b1 @ b1);
ucl_hex_c := ( b1 @ b1 @ b0 @ b0);
ucl_hex_d := ( b1 @ b1 @ b0 @ b1);
ucl_hex_e := ( b1 @ b1 @ b1 @ b0);
ucl_hex_f := ( b1 @ b1 @ b1 @ b1);

RCX := State.rcx;
EDX := State.rdx # [31:0];

ASSIGN

init[rcx] := rcx_i;
next[rcx] := EDX;


(*----- ./models//inc.txt -----*)
MODULE incInstr

INPUT


VAR
DEST : BITVEC[64];

CONST

DEST_i : BITVEC[64];

DEFINE

b0 := ( 0 # [0:0] );
b1 := ( 1 # [0:0] );
ucl_hex_0 := ( b0 @ b0 @ b0 @ b0);
ucl_hex_1 := ( b0 @ b0 @ b0 @ b1);
ucl_hex_2 := ( b0 @ b0 @ b1 @ b0);
ucl_hex_3 := ( b0 @ b0 @ b1 @ b1);
ucl_hex_4 := ( b0 @ b1 @ b0 @ b0);
ucl_hex_5 := ( b0 @ b1 @ b0 @ b1);
ucl_hex_6 := ( b0 @ b1 @ b1 @ b0);
ucl_hex_7 := ( b0 @ b1 @ b1 @ b1);
ucl_hex_8 := ( b1 @ b0 @ b0 @ b0);
ucl_hex_9 := ( b1 @ b0 @ b0 @ b1);
ucl_hex_a := ( b1 @ b0 @ b1 @ b0);
ucl_hex_b := ( b1 @ b0 @ b1 @ b1);
ucl_hex_c := ( b1 @ b1 @ b0 @ b0);
ucl_hex_d := ( b1 @ b1 @ b0 @ b1);
ucl_hex_e := ( b1 @ b1 @ b1 @ b0);
ucl_hex_f := ( b1 @ b1 @ b1 @ b1);


ASSIGN

(*CKS: Do you need to make sure 1 is a 64-bit number before doing the addition?*)
init[DEST] := DEST_i;
next[DEST] := DEST +_64 1;

(*----- ./models//sysret.txt -----*)
MODULE sysretInstr

INPUT

State.ss_limit : BITVEC[20];
State.ss_selector : BITVEC[16];
State.cpl : BITVEC[2];
State.rflags : BITVEC[64];
State.r11 : BITVEC[64];
State.ss_base : BITVEC[32];
State.ss_accessRights : BITVEC[12];
State.EFER : BITVEC[64];
State.cs_base : BITVEC[32];
State.rip : BITVEC[64];
State.cs_selector : BITVEC[16];
State.cs_limit : BITVEC[20];
State.rcx : BITVEC[64];
State.cs_accessRights : BITVEC[12];

VAR
ss_base : BITVEC[32];
exitStatus : exitCase;
cpl : BITVEC[2];
ss_limit : BITVEC[20];
cs_selector : BITVEC[16];
ss_accessRights : BITVEC[12];
rip : BITVEC[64];
cs_accessRights : BITVEC[12];
cs_base : BITVEC[32];
cs_limit : BITVEC[20];
ss_selector : BITVEC[16];
rflags : BITVEC[64];

CONST
IA32_STAR: BITVEC[64];
operand_size_is_64_bit: TRUTH;

ss_base_i : BITVEC[32];
cpl_i : BITVEC[2];
ss_limit_i : BITVEC[20];
cs_selector_i : BITVEC[16];
ss_accessRights_i : BITVEC[12];
rip_i : BITVEC[64];
cs_accessRights_i : BITVEC[12];
cs_base_i : BITVEC[32];
cs_limit_i : BITVEC[20];
ss_selector_i : BITVEC[16];
rflags_i : BITVEC[64];

DEFINE

b0 := ( 0 # [0:0] );
b1 := ( 1 # [0:0] );
ucl_hex_0 := ( b0 @ b0 @ b0 @ b0);
ucl_hex_1 := ( b0 @ b0 @ b0 @ b1);
ucl_hex_2 := ( b0 @ b0 @ b1 @ b0);
ucl_hex_3 := ( b0 @ b0 @ b1 @ b1);
ucl_hex_4 := ( b0 @ b1 @ b0 @ b0);
ucl_hex_5 := ( b0 @ b1 @ b0 @ b1);
ucl_hex_6 := ( b0 @ b1 @ b1 @ b0);
ucl_hex_7 := ( b0 @ b1 @ b1 @ b1);
ucl_hex_8 := ( b1 @ b0 @ b0 @ b0);
ucl_hex_9 := ( b1 @ b0 @ b0 @ b1);
ucl_hex_a := ( b1 @ b0 @ b1 @ b0);
ucl_hex_b := ( b1 @ b0 @ b1 @ b1);
ucl_hex_c := ( b1 @ b1 @ b0 @ b0);
ucl_hex_d := ( b1 @ b1 @ b0 @ b1);
ucl_hex_e := ( b1 @ b1 @ b1 @ b0);
ucl_hex_f := ( b1 @ b1 @ b1 @ b1);

RFLAGS := State.rflags;
RCX := State.rcx;
IA32_EFER.SCE := State.EFER # [0:0];
CS.L := State.cs_accessRights # [2:2];
R11 := State.r11;
ECX := State.rcx # [31:0];
CPL := State.cpl;
IA32_EFER.LMA := State.EFER # [10:10];
RIP := State.rip;
CS.G := ( b1 );
SS.DPL := ( (b1)@(b1) );
SS.G := ( b1 );
SS.P := ( b1 );
CS.P := ( b1 );
CS.Type := ( (ucl_hex_b) );
SS.S := ( b1 );
CS.DPL := ( (b1)@(b1) );
SS.Type := ( (ucl_hex_3) );
SS.B := ( b1 );
CS.S := ( b1 );
CS.AVL := State.cs_accessRights # [3:3];
CS.B := State.cs_accessRights # [1:1];
CS.D := State.cs_accessRights # [1:1];
CS.L := State.cs_accessRights # [2:2];
SS.AVL := State.ss_accessRights # [3:3];
SS.D := State.ss_accessRights # [1:1];
SS.L := State.ss_accessRights # [2:2];
CS.L0 := case
    operand_size_is_64_bit : ( b0 );
    operand_size_is_64_bit : ( b1 );
    default : State.cs_accessRights # [2:2];
esac;

CS.L_n := CS.L0;

CS.D0 := case
    operand_size_is_64_bit : ( b1 );
    operand_size_is_64_bit : ( b0 );
    default : State.cs_accessRights # [1:1];
esac;

CS.D_n := CS.D0;

exitStatus0 := case
    CPL != (b0)@(b0) | isCanonical(RCX) : GP;
    CS.L != b1 | IA32_EFER.LMA != b1 | IA32_EFER.SCE != b1 : UD;
    default : Normal;
esac;

exitStatus_n := exitStatus0;

RIP0 := case
    operand_size_is_64_bit : ( ECX );
    operand_size_is_64_bit : ( RCX );
    default : RIP;
esac;

RIP_n := RIP0;

CS.Selector0 := case
    operand_size_is_64_bit : ( IA32_STAR # [63:48] );
    operand_size_is_64_bit : ( IA32_STAR # [63:48] ) +_16 ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_1) @ (ucl_hex_0) );
    default : State.cs_selector;
esac;

CS.Selector_n := CS.Selector0;


ASSIGN

init[ss_base] := ss_base_i;
next[ss_base] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) );
    default : State.ss_base;
esac;

init[exitStatus] := Normal;
next[exitStatus] := exitStatus_n;

init[cpl] := cpl_i;
next[cpl] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( (b1)@(b1) );
    default : State.cpl;
esac;

init[ss_limit] := ss_limit_i;
next[ss_limit] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) );
    default : State.ss_limit;
esac;

init[cs_selector] := cs_selector_i;
next[cs_selector] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( CS.Selector_n ) || ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_3) );
    default : State.cs_selector;
esac;

init[ss_accessRights] := ss_accessRights_i;
next[ss_accessRights] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( ( SS.Type ) ) @ ( ( SS.S ) ) @ ( ( SS.DPL ) ) @ ( ( SS.P ) ) @ ( ( SS.AVL ) ) @ ( ( SS.L ) ) @ ( ( SS.B ) ) @ ( ( SS.G ) );
    default : State.ss_accessRights;
esac;

init[rip] := rip_i;
next[rip] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( RIP_n );
    default : State.rip;
esac;

init[cs_accessRights] := cs_accessRights_i;
next[cs_accessRights] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( ( CS.Type ) ) @ ( ( CS.S ) ) @ ( ( CS.DPL ) ) @ ( ( CS.P ) ) @ ( ( CS.AVL ) ) @ ( ( CS.L_n ) ) @ ( ( CS.D_n ) ) @ ( ( CS.G ) );
    default : State.cs_accessRights;
esac;

init[cs_base] := cs_base_i;
next[cs_base] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) );
    default : State.cs_base;
esac;

init[cs_limit] := cs_limit_i;
next[cs_limit] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) );
    default : State.cs_limit;
esac;

init[ss_selector] := ss_selector_i;
next[ss_selector] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( IA32_STAR # [63:48] ) +_16 ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_8) ) || ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_3) );
    default : State.ss_selector;
esac;

init[rflags] := rflags_i;
next[rflags] := case
    next[exitStatus] != UD & next[exitStatus] != GP : ( R11 ) && ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_3) @ (ucl_hex_c) @ (ucl_hex_7) @ (ucl_hex_f) @ (ucl_hex_d) @ (ucl_hex_7) ) || ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_2) );
    default : State.rflags;
esac;


(*----- ./models//dec.txt -----*)
MODULE decInstr

INPUT


VAR
DEST : BITVEC[64];

CONST

DEST_i : BITVEC[64];

DEFINE

b0 := ( 0 # [0:0] );
b1 := ( 1 # [0:0] );
ucl_hex_0 := ( b0 @ b0 @ b0 @ b0);
ucl_hex_1 := ( b0 @ b0 @ b0 @ b1);
ucl_hex_2 := ( b0 @ b0 @ b1 @ b0);
ucl_hex_3 := ( b0 @ b0 @ b1 @ b1);
ucl_hex_4 := ( b0 @ b1 @ b0 @ b0);
ucl_hex_5 := ( b0 @ b1 @ b0 @ b1);
ucl_hex_6 := ( b0 @ b1 @ b1 @ b0);
ucl_hex_7 := ( b0 @ b1 @ b1 @ b1);
ucl_hex_8 := ( b1 @ b0 @ b0 @ b0);
ucl_hex_9 := ( b1 @ b0 @ b0 @ b1);
ucl_hex_a := ( b1 @ b0 @ b1 @ b0);
ucl_hex_b := ( b1 @ b0 @ b1 @ b1);
ucl_hex_c := ( b1 @ b1 @ b0 @ b0);
ucl_hex_d := ( b1 @ b1 @ b0 @ b1);
ucl_hex_e := ( b1 @ b1 @ b1 @ b0);
ucl_hex_f := ( b1 @ b1 @ b1 @ b1);


ASSIGN

(*CKS: Do you need to make sure 1 is a 64-bit number before doing bitvector subtraction*)
init[DEST] := DEST_i;
next[DEST] := DEST -_64 1;

(*----- ./models//push.txt -----*)
MODULE pushInstr

INPUT

State.rsp : BITVEC[64];
State.memory : FUNC[1];

VAR
SRC : BITVEC[64];
OperandSize : size;
StackAddrSize : size;
rsp : BITVEC[64];
memory : BITVEC[64];

CONST
RNG: BITVECFUNC[64];

SRC_i : BITVEC[64];
rsp_i : BITVEC[64];
memory_i : BITVEC[64];

DEFINE

b0 := ( 0 # [0:0] );
b1 := ( 1 # [0:0] );
ucl_hex_0 := ( b0 @ b0 @ b0 @ b0);
ucl_hex_1 := ( b0 @ b0 @ b0 @ b1);
ucl_hex_2 := ( b0 @ b0 @ b1 @ b0);
ucl_hex_3 := ( b0 @ b0 @ b1 @ b1);
ucl_hex_4 := ( b0 @ b1 @ b0 @ b0);
ucl_hex_5 := ( b0 @ b1 @ b0 @ b1);
ucl_hex_6 := ( b0 @ b1 @ b1 @ b0);
ucl_hex_7 := ( b0 @ b1 @ b1 @ b1);
ucl_hex_8 := ( b1 @ b0 @ b0 @ b0);
ucl_hex_9 := ( b1 @ b0 @ b0 @ b1);
ucl_hex_a := ( b1 @ b0 @ b1 @ b0);
ucl_hex_b := ( b1 @ b0 @ b1 @ b1);
ucl_hex_c := ( b1 @ b1 @ b0 @ b0);
ucl_hex_d := ( b1 @ b1 @ b0 @ b1);
ucl_hex_e := ( b1 @ b1 @ b1 @ b0);
ucl_hex_f := ( b1 @ b1 @ b1 @ b1);

RSP := State.rsp;
ESP := State.rsp # [31:0];
SP := State.rsp # [15:0];
SP0 := case
    OperandSize = bits32 & StackAddrSize != bits32 & (StackAddrSize != bits64) : SP - 4;
    OperandSize != bits32 & (StackAddrSize != bits32 & (StackAddrSize != bits64)) : SP - 2;
    default : SP;
esac;

SP_n := SP0;

RSP0 := case
    OperandSize = bits32 & OperandSize != bits64 & (StackAddrSize = bits64) : ( RSP ) -_64 ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_4) );
    OperandSize = bits64 & StackAddrSize = bits64 : ( RSP ) -_64 ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_8) );
    OperandSize != bits32 & (OperandSize != bits64 & (StackAddrSize = bits64)) : ( RSP ) -_64 ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_2) );
    default : RSP;
esac;

RSP_n := RSP0;

ESP0 := case
    OperandSize = bits64 & StackAddrSize = bits32 & StackAddrSize != bits64 : ESP - 8;
    OperandSize = bits32 & OperandSize != bits64 & (StackAddrSize = bits32 & StackAddrSize != bits64) : ESP - 4;
    OperandSize != bits32 & (OperandSize != bits64 & (StackAddrSize = bits32 & StackAddrSize != bits64)) : ESP - 2;
    default : ESP;
esac;

ESP_n := ESP0;

memory0 := case
    OperandSize = bits32 & OperandSize != bits64 & (StackAddrSize = bits32 & StackAddrSize != bits64) : ( SRC );
    OperandSize != bits32 & (OperandSize != bits64 & (StackAddrSize = bits32 & StackAddrSize != bits64)) : ( SRC );
    OperandSize = bits32 & StackAddrSize != bits32 & (StackAddrSize != bits64) : ( SRC );
    OperandSize != bits32 & (StackAddrSize != bits32 & (StackAddrSize != bits64)) : ( SRC );
    OperandSize = bits64 & StackAddrSize = bits64 : ( SRC );
    OperandSize = bits32 & OperandSize != bits64 & (StackAddrSize = bits64) : ( SRC );
    OperandSize != bits32 & (OperandSize != bits64 & (StackAddrSize = bits64)) : ( SRC );
    OperandSize = bits64 & StackAddrSize = bits32 & StackAddrSize != bits64 : ( SRC );
    default : State.memory(State.rsp);
esac;

memory_n := memory0;


ASSIGN

init[SRC] := SRC_i;
next[SRC] := RNG(SRC);

init[OperandSize] := {bits64, bits32, bits16};
next[OperandSize] := {bits64, bits32, bits16};

init[StackAddrSize] := {bits64, bits32, bits16};
next[StackAddrSize] := {bits64, bits32, bits16};

init[rsp] := rsp_i;
next[rsp] := RSP_n;

init[memory] := memory_i;
next[memory] := memory_n;


(*----- ./models//wrsmr.txt -----*)

(*----- ./models//adc.txt -----*)
MODULE adcInstr

INPUT

State.rflags : BITVEC[64];

VAR
DEST : BITVEC[64];
SRC : BITVEC[64];

CONST
RNG: BITVECFUNC[64];

DEST_i : BITVEC[64];
SRC_i : BITVEC[64];

DEFINE

b0 := ( 0 # [0:0] );
b1 := ( 1 # [0:0] );
ucl_hex_0 := ( b0 @ b0 @ b0 @ b0);
ucl_hex_1 := ( b0 @ b0 @ b0 @ b1);
ucl_hex_2 := ( b0 @ b0 @ b1 @ b0);
ucl_hex_3 := ( b0 @ b0 @ b1 @ b1);
ucl_hex_4 := ( b0 @ b1 @ b0 @ b0);
ucl_hex_5 := ( b0 @ b1 @ b0 @ b1);
ucl_hex_6 := ( b0 @ b1 @ b1 @ b0);
ucl_hex_7 := ( b0 @ b1 @ b1 @ b1);
ucl_hex_8 := ( b1 @ b0 @ b0 @ b0);
ucl_hex_9 := ( b1 @ b0 @ b0 @ b1);
ucl_hex_a := ( b1 @ b0 @ b1 @ b0);
ucl_hex_b := ( b1 @ b0 @ b1 @ b1);
ucl_hex_c := ( b1 @ b1 @ b0 @ b0);
ucl_hex_d := ( b1 @ b1 @ b0 @ b1);
ucl_hex_e := ( b1 @ b1 @ b1 @ b0);
ucl_hex_f := ( b1 @ b1 @ b1 @ b1);

rflags_cf := State.rflags # [0:0];

ASSIGN

(*CKS: do you need to 0-extend rflags_cf so it is 64 bits long before doing the addition?*)
init[DEST] := DEST_i;
next[DEST] := DEST +_64 SRC +_64 rflags_cf;


init[SRC] := SRC_i;
next[SRC] := RNG(SRC);


(*----- ./models//and.txt -----*)
MODULE andInstr

INPUT


VAR
DEST : BITVEC[64];
SRC : BITVEC[64];

CONST
RNG: BITVECFUNC[64];

DEST_i : BITVEC[64];
SRC_i : BITVEC[64];

DEFINE

b0 := ( 0 # [0:0] );
b1 := ( 1 # [0:0] );
ucl_hex_0 := ( b0 @ b0 @ b0 @ b0);
ucl_hex_1 := ( b0 @ b0 @ b0 @ b1);
ucl_hex_2 := ( b0 @ b0 @ b1 @ b0);
ucl_hex_3 := ( b0 @ b0 @ b1 @ b1);
ucl_hex_4 := ( b0 @ b1 @ b0 @ b0);
ucl_hex_5 := ( b0 @ b1 @ b0 @ b1);
ucl_hex_6 := ( b0 @ b1 @ b1 @ b0);
ucl_hex_7 := ( b0 @ b1 @ b1 @ b1);
ucl_hex_8 := ( b1 @ b0 @ b0 @ b0);
ucl_hex_9 := ( b1 @ b0 @ b0 @ b1);
ucl_hex_a := ( b1 @ b0 @ b1 @ b0);
ucl_hex_b := ( b1 @ b0 @ b1 @ b1);
ucl_hex_c := ( b1 @ b1 @ b0 @ b0);
ucl_hex_d := ( b1 @ b1 @ b0 @ b1);
ucl_hex_e := ( b1 @ b1 @ b1 @ b0);
ucl_hex_f := ( b1 @ b1 @ b1 @ b1);


ASSIGN

init[DEST] := DEST_i;
next[DEST] := DEST && SRC;

init[SRC] := SRC_i;
next[SRC] := RNG(SRC);


(*----- ./models//mov.txt -----*)
MODULE movInstr

INPUT


VAR
DEST : BITVEC[64];
SRC : BITVEC[64];

CONST
RNG: BITVECFUNC[64];

DEST_i : BITVEC[64];
SRC_i : BITVEC[64];

DEFINE

b0 := ( 0 # [0:0] );
b1 := ( 1 # [0:0] );
ucl_hex_0 := ( b0 @ b0 @ b0 @ b0);
ucl_hex_1 := ( b0 @ b0 @ b0 @ b1);
ucl_hex_2 := ( b0 @ b0 @ b1 @ b0);
ucl_hex_3 := ( b0 @ b0 @ b1 @ b1);
ucl_hex_4 := ( b0 @ b1 @ b0 @ b0);
ucl_hex_5 := ( b0 @ b1 @ b0 @ b1);
ucl_hex_6 := ( b0 @ b1 @ b1 @ b0);
ucl_hex_7 := ( b0 @ b1 @ b1 @ b1);
ucl_hex_8 := ( b1 @ b0 @ b0 @ b0);
ucl_hex_9 := ( b1 @ b0 @ b0 @ b1);
ucl_hex_a := ( b1 @ b0 @ b1 @ b0);
ucl_hex_b := ( b1 @ b0 @ b1 @ b1);
ucl_hex_c := ( b1 @ b1 @ b0 @ b0);
ucl_hex_d := ( b1 @ b1 @ b0 @ b1);
ucl_hex_e := ( b1 @ b1 @ b1 @ b0);
ucl_hex_f := ( b1 @ b1 @ b1 @ b1);


ASSIGN

init[DEST] := DEST_i;
next[DEST] := SRC;

init[SRC] := SRC_i;
next[SRC] := RNG(SRC);


(*----- ./models//out.txt -----*)
MODULE outInstr

INPUT

State.CR0 : BITVEC[64];
State.cpl : BITVEC[2];
State.rflags : BITVEC[64];

VAR
DEST : BITVEC[64];
SRC : BITVEC[64];
exitStatus : exitCase;

CONST
ioPriv: TRUTH;
RNG: BITVECFUNC[64];

DEST_i : BITVEC[64];
SRC_i : BITVEC[64];

DEFINE

b0 := ( 0 # [0:0] );
b1 := ( 1 # [0:0] );
ucl_hex_0 := ( b0 @ b0 @ b0 @ b0);
ucl_hex_1 := ( b0 @ b0 @ b0 @ b1);
ucl_hex_2 := ( b0 @ b0 @ b1 @ b0);
ucl_hex_3 := ( b0 @ b0 @ b1 @ b1);
ucl_hex_4 := ( b0 @ b1 @ b0 @ b0);
ucl_hex_5 := ( b0 @ b1 @ b0 @ b1);
ucl_hex_6 := ( b0 @ b1 @ b1 @ b0);
ucl_hex_7 := ( b0 @ b1 @ b1 @ b1);
ucl_hex_8 := ( b1 @ b0 @ b0 @ b0);
ucl_hex_9 := ( b1 @ b0 @ b0 @ b1);
ucl_hex_a := ( b1 @ b0 @ b1 @ b0);
ucl_hex_b := ( b1 @ b0 @ b1 @ b1);
ucl_hex_c := ( b1 @ b1 @ b0 @ b0);
ucl_hex_d := ( b1 @ b1 @ b0 @ b1);
ucl_hex_e := ( b1 @ b1 @ b1 @ b0);
ucl_hex_f := ( b1 @ b1 @ b1 @ b1);

PE := State.CR0 # [0:0];
rflags_iopl := State.rflags # [13:12];
rflags_vm := State.rflags # [17:17];
CPL := State.cpl;
DEST0 := case
    PE = b1 & CPL > rflags_iopl | rflags_vm = b1 : SRC;
    ioPriv & (PE = b1 & CPL > rflags_iopl | rflags_vm = 1) : SRC;
    default : DEST;
esac;

DEST_n := DEST0;


ASSIGN

init[DEST] := DEST_i;
next[DEST] := DEST_n;

init[SRC] := SRC_i;
next[SRC] := RNG(SRC);

init[exitStatus] := Normal;
next[exitStatus] := case
    ioPriv & PE = b1 & CPL > rflags_iopl | rflags_vm = b1 : GP;
    default : Normal;
esac;


(*----- ./models//pop.txt -----*)
MODULE popInstr

INPUT

State.rsp : BITVEC[64];
State.memory : FUNC[1];

VAR
DEST : BITVEC[64];
StackAddrSize : size;
rsp : BITVEC[64];
OperandSize : size;

CONST

DEST_i : BITVEC[64];
rsp_i : BITVEC[64];

DEFINE

b0 := ( 0 # [0:0] );
b1 := ( 1 # [0:0] );
ucl_hex_0 := ( b0 @ b0 @ b0 @ b0);
ucl_hex_1 := ( b0 @ b0 @ b0 @ b1);
ucl_hex_2 := ( b0 @ b0 @ b1 @ b0);
ucl_hex_3 := ( b0 @ b0 @ b1 @ b1);
ucl_hex_4 := ( b0 @ b1 @ b0 @ b0);
ucl_hex_5 := ( b0 @ b1 @ b0 @ b1);
ucl_hex_6 := ( b0 @ b1 @ b1 @ b0);
ucl_hex_7 := ( b0 @ b1 @ b1 @ b1);
ucl_hex_8 := ( b1 @ b0 @ b0 @ b0);
ucl_hex_9 := ( b1 @ b0 @ b0 @ b1);
ucl_hex_a := ( b1 @ b0 @ b1 @ b0);
ucl_hex_b := ( b1 @ b0 @ b1 @ b1);
ucl_hex_c := ( b1 @ b1 @ b0 @ b0);
ucl_hex_d := ( b1 @ b1 @ b0 @ b1);
ucl_hex_e := ( b1 @ b1 @ b1 @ b0);
ucl_hex_f := ( b1 @ b1 @ b1 @ b1);

RSP := State.rsp;
ESP := State.rsp # [31:0];
SP := State.rsp # [15:0];
DEST0 := case
    OperandSize != bits32 & (StackAddrSize = bits32) : State.memory(ESP);
    OperandSize = bits32 & StackAddrSize = bits32 : State.memory(ESP);
    OperandSize != bits64 & (StackAddrSize = bits64 & StackAddrSize != bits32) : State.memory(RSP);
    OperandSize = bits64 & StackAddrSize = bits64 & StackAddrSize != bits32 : State.memory(RSP);
    OperandSize != bits16 & (StackAddrSize != bits64 & (StackAddrSize != bits32)) : State.memory(SP);
    OperandSize = bits16 & StackAddrSize != bits64 & (StackAddrSize != bits32) : State.memory(SP);
    default : DEST;
esac;

DEST_n := DEST0;

SP0 := case
    OperandSize = bits16 & StackAddrSize != bits64 & (StackAddrSize != bits32) : SP + 2;
    OperandSize != bits16 & (StackAddrSize != bits64 & (StackAddrSize != bits32)) : SP + 4;
    default : SP;
esac;

SP_n := SP0;

RSP0 := case
    OperandSize != bits64 & (StackAddrSize = bits64 & StackAddrSize != bits32) : ( RSP ) +_64 ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_2) );
    OperandSize = bits64 & StackAddrSize = bits64 & StackAddrSize != bits32 : ( RSP ) +_64 ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_8) );
    default : RSP;
esac;

RSP_n := RSP0;

ESP0 := case
    OperandSize = bits32 & StackAddrSize = bits32 : ESP + 4;
    OperandSize != bits32 & (StackAddrSize = bits32) : ESP + 2;
    default : ESP;
esac;

ESP_n := ESP0;


ASSIGN

init[DEST] := DEST_i;
next[DEST] := DEST_n;

init[StackAddrSize] := {bits64, bits32, bits16};
next[StackAddrSize] := {bits64, bits32, bits16};

init[rsp] := rsp_i;
next[rsp] := RSP_n;

init[OperandSize] := {bits64, bits32, bits16};
next[OperandSize] := {bits64, bits32, bits16};


(*----- ./models//syscall.txt -----*)
MODULE syscallInstr

INPUT

State.ss_limit : BITVEC[20];
State.ss_selector : BITVEC[16];
State.rcx : BITVEC[64];
State.rflags : BITVEC[64];
State.r11 : BITVEC[64];
State.ss_base : BITVEC[32];
State.ss_accessRights : BITVEC[12];
State.EFER : BITVEC[64];
State.cs_base : BITVEC[32];
State.rip : BITVEC[64];
State.cs_selector : BITVEC[16];
State.cs_limit : BITVEC[20];
State.cpl : BITVEC[2];
State.cs_accessRights : BITVEC[12];

VAR
ss_base : BITVEC[32];
exitStatus : exitCase;
rcx : BITVEC[64];
r11 : BITVEC[64];
ss_limit : BITVEC[20];
cs_selector : BITVEC[16];
ss_accessRights : BITVEC[12];
rip : BITVEC[64];
cs_accessRights : BITVEC[12];
cs_base : BITVEC[32];
cs_limit : BITVEC[20];
cpl : BITVEC[2];
ss_selector : BITVEC[16];
rflags : BITVEC[64];

CONST
IA32_FMASK: BITVEC[64];
rflags_rfLAGS: BITVEC[64];
IA32_LSTAR: BITVEC[64];
IA32_STAR: BITVEC[64];

ss_base_i : BITVEC[32];
rcx_i : BITVEC[64];
r11_i : BITVEC[64];
ss_limit_i : BITVEC[20];
cs_selector_i : BITVEC[16];
ss_accessRights_i : BITVEC[12];
rip_i : BITVEC[64];
cs_accessRights_i : BITVEC[12];
cs_base_i : BITVEC[32];
cs_limit_i : BITVEC[20];
cpl_i : BITVEC[2];
ss_selector_i : BITVEC[16];
rflags_i : BITVEC[64];

DEFINE

b0 := ( 0 # [0:0] );
b1 := ( 1 # [0:0] );
ucl_hex_0 := ( b0 @ b0 @ b0 @ b0);
ucl_hex_1 := ( b0 @ b0 @ b0 @ b1);
ucl_hex_2 := ( b0 @ b0 @ b1 @ b0);
ucl_hex_3 := ( b0 @ b0 @ b1 @ b1);
ucl_hex_4 := ( b0 @ b1 @ b0 @ b0);
ucl_hex_5 := ( b0 @ b1 @ b0 @ b1);
ucl_hex_6 := ( b0 @ b1 @ b1 @ b0);
ucl_hex_7 := ( b0 @ b1 @ b1 @ b1);
ucl_hex_8 := ( b1 @ b0 @ b0 @ b0);
ucl_hex_9 := ( b1 @ b0 @ b0 @ b1);
ucl_hex_a := ( b1 @ b0 @ b1 @ b0);
ucl_hex_b := ( b1 @ b0 @ b1 @ b1);
ucl_hex_c := ( b1 @ b1 @ b0 @ b0);
ucl_hex_d := ( b1 @ b1 @ b0 @ b1);
ucl_hex_e := ( b1 @ b1 @ b1 @ b0);
ucl_hex_f := ( b1 @ b1 @ b1 @ b1);

RFLAGS := State.rflags;
RCX := State.rcx;
IA32_EFER.SCE := State.EFER # [0:0];
CS.L := State.cs_accessRights # [2:2];
R11 := State.r11;
CPL := State.cpl;
IA32_EFER.LMA := State.EFER # [10:10];
RIP := State.rip;
CS.G := ( b1 );
SS.DPL := ( (b0)@(b0) );
SS.G := ( b1 );
SS.P := ( b1 );
CS.P := ( b1 );
CS.L_n := ( b1 );
CS.Type := ( (ucl_hex_b) );
CS.D := ( b0 );
SS.S := ( b1 );
CS.DPL := ( (b0)@(b0) );
SS.Type := ( (ucl_hex_3) );
SS.B := ( b1 );
CS.S := ( b1 );
CS.AVL := State.cs_accessRights # [3:3];
CS.B := State.cs_accessRights # [1:1];
SS.AVL := State.ss_accessRights # [3:3];
SS.D := State.ss_accessRights # [1:1];
SS.L := State.ss_accessRights # [2:2];

ASSIGN

init[ss_base] := ss_base_i;
next[ss_base] := case
    next[exitStatus] != UD : ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) );
    default : State.ss_base;
esac;

init[exitStatus] := Normal;
next[exitStatus] := case
    CS.L != b1 | IA32_EFER.LMA != b1 | IA32_EFER.SCE != b1 : UD;
    default : Normal;
esac;

init[rcx] := rcx_i;
next[rcx] := case
    next[exitStatus] != UD : ( RIP );
    default : State.rcx;
esac;

init[r11] := r11_i;
next[r11] := case
    next[exitStatus] != UD : ( rflags_rfLAGS );
    default : State.r11;
esac;

init[ss_limit] := ss_limit_i;
next[ss_limit] := case
    next[exitStatus] != UD : ( (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) );
    default : State.ss_limit;
esac;

init[cs_selector] := cs_selector_i;
next[cs_selector] := case
    next[exitStatus] != UD : ( IA32_STAR # [47:32] ) && ( (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_c) );
    default : State.cs_selector;
esac;

init[ss_accessRights] := ss_accessRights_i;
next[ss_accessRights] := case
    next[exitStatus] != UD : ( ( SS.Type ) ) @ ( ( SS.S ) ) @ ( ( SS.DPL ) ) @ ( ( SS.P ) ) @ ( ( SS.AVL ) ) @ ( ( SS.L ) ) @ ( ( SS.B ) ) @ ( ( SS.G ) );
    default : State.ss_accessRights;
esac;

init[rip] := rip_i;
next[rip] := case
    next[exitStatus] != UD : ( IA32_LSTAR );
    default : State.rip;
esac;

init[cs_accessRights] := cs_accessRights_i;
next[cs_accessRights] := case
    next[exitStatus] != UD : ( ( CS.Type ) ) @ ( ( CS.S ) ) @ ( ( CS.DPL ) ) @ ( ( CS.P ) ) @ ( ( CS.AVL ) ) @ ( ( CS.L_n ) ) @ ( ( CS.D ) ) @ ( ( CS.G ) );
    default : State.cs_accessRights;
esac;

init[cs_base] := cs_base_i;
next[cs_base] := case
    next[exitStatus] != UD : ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) );
    default : State.cs_base;
esac;

init[cs_limit] := cs_limit_i;
next[cs_limit] := case
    next[exitStatus] != UD : ( (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) @ (ucl_hex_f) );
    default : State.cs_limit;
esac;

init[cpl] := cpl_i;
next[cpl] := case
    next[exitStatus] != UD : ( (b0)@(b0) );
    default : State.cpl;
esac;

init[ss_selector] := ss_selector_i;
next[ss_selector] := case
    next[exitStatus] != UD : ( IA32_STAR # [47:32] ) +_16 ( (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_0) @ (ucl_hex_8) );
    default : State.ss_selector;
esac;

init[rflags] := rflags_i;
next[rflags] := case
    next[exitStatus] != UD : ( rflags_rfLAGS ) && ( !!IA32_FMASK );
    default : State.rflags;
esac;


(*----- state/vars.txt -----*)
MODULE State

INPUT

opcode : opcodes;

VAR
ss_limit : BITVEC[20];
ss_selector : BITVEC[15];
rax : BITVEC[64];
rbx : BITVEC[64];
rcx : BITVEC[64];
rdx : BITVEC[64];
rflags : BITVEC[64];
r11 : BITVEC[64];
ss_base : BITVEC[32];
ss_accessRights : BITVEC[12];
EFER : BITVEC[64];
cs_base : BITVEC[32];
rip : BITVEC[64];
cs_selector : BITVEC[15];
cs_limit : BITVEC[20];
cpl : BITVEC[2];
cs_accessRights : BITVEC[12];
CR0 : BITVEC[64];
CR4 : BITVEC[64];
currentReg : register;
opcode : opcodes;
memory : BITVECFUNC[64];
stack : BITVECFUNC[64];
cache : BITVECFUNC[64];
rsp : BITVEC[64];
exceptionThrown : TRUTH;
manyCacheTypes : FUNC[1] of cacheType;
works : FUNC[1] of cacheType;

CONST

i : BITVEC[64];
j : BITVEC[64];
k : BITVEC[64];

mct : BITVEC[64];


m0 : BITVECFUNC[64];
addr  : BITVEC[64];
SRC : BITVEC[64];


ss_limit_i : BITVEC[20];
ss_selector_i : BITVEC[15];
rax_i : BITVEC[64];
rbx_i : BITVEC[64];
rcx_i : BITVEC[64];
rdx_i : BITVEC[64];
rflags_i : BITVEC[64];
r11_i : BITVEC[64];
ss_base_i : BITVEC[32];
ss_accessRights_i : BITVEC[12];
EFER_i : BITVEC[64];
cs_base_i : BITVEC[32];
rip_i : BITVEC[64];
cs_selector_i : BITVEC[15];
cs_limit_i : BITVEC[20];
cpl_i : BITVEC[2];
cs_accessRights_i : BITVEC[12];
CR0_i : BITVEC[64];
CR4_i : BITVEC[64];
rsp_i : BITVEC[64];


DEFINE

ASSIGN

init[currentReg] := {a, b, c, d};
next[currentReg] := {a, b, c, d};

init[stack] := Lambda(i). m0(i);
next[stack] := Lambda(i).
	case
		i = next[pushInstr.rsp] & opcode = push : SRC; 
		default : stack(i); 
	esac;


init[manyCacheTypes] := Lambda(mct). cacheable ;
next[manyCacheTypes] := Lambda(mct).
	case
		mct = rcx & opcode = wrmsr : manyCacheTypes((rdx # [31:0]) @ (rax # [31:0])); 
		default : manyCacheTypes(mct); 
	esac;



init[memory] := Lambda(j). m0(j);
next[memory] := Lambda(j).
	case
		manyCacheTypes(j) = cacheable & opcode = mov & j = movInstr.DEST: SRC; 
		manyCacheTypes(j) = uncacheable & opcode = mov & j = movInstr.DEST: SRC; 
		default : memory(j); 
	esac;



init[cache] := Lambda(k). m0(k);
next[cache] := Lambda(k).
	case
		manyCacheTypes(k) = cacheable & opcode = mov & k = movInstr.DEST: SRC; 
		manyCacheTypes(k) = writeBack & opcode = mov & k = movInstr.DEST: SRC; 
		default : cache(k); 
	esac;


init[ss_limit] := ss_limit_i;
next[ss_limit] := case
    ~exceptionThrown & opcode = sysret : next[sysretInstr.ss_limit];
    ~exceptionThrown & opcode = syscall : next[syscallInstr.ss_limit];
    default : ss_limit;
esac;

init[ss_accessRights] := ss_accessRights_i;
next[ss_accessRights] := case
    ~exceptionThrown & opcode = sysret : next[sysretInstr.ss_accessRights];
    ~exceptionThrown & opcode = syscall : next[syscallInstr.ss_accessRights];
    default : ss_accessRights;
esac;

init[rcx] := rcx_i;
next[rcx] := case
    ~exceptionThrown & opcode = add & currentReg = c : next[addInstr.DEST];
    ~exceptionThrown & opcode = wrmsr : next[wrmsrInstr.rcx];
    ~exceptionThrown & opcode = inc & currentReg = c : next[incInstr.DEST];
    ~exceptionThrown & opcode = dec & currentReg = c : next[decInstr.DEST];
    ~exceptionThrown & opcode = adc & currentReg = c : next[adcInstr.DEST];
    ~exceptionThrown & opcode = and & currentReg = c : next[andInstr.DEST];
    ~exceptionThrown & opcode = mov & currentReg = c : next[movInstr.DEST];
    ~exceptionThrown & opcode = pop & currentReg = c : next[popInstr.DEST];
    ~exceptionThrown & opcode = syscall : next[syscallInstr.rcx];
    default : rcx;
esac;

init[cs_accessRights] := cs_accessRights_i;
next[cs_accessRights] := case
    ~exceptionThrown & opcode = sysret : next[sysretInstr.cs_accessRights];
    ~exceptionThrown & opcode = syscall : next[syscallInstr.cs_accessRights];
    default : cs_accessRights;
esac;

init[CR4] := CR4_i;
next[CR4] := CR4;


init[rbx] := rbx_i;
next[rbx] := case
    ~exceptionThrown & opcode = add & currentReg = b : next[addInstr.DEST];
    ~exceptionThrown & opcode = inc & currentReg = b : next[incInstr.DEST];
    ~exceptionThrown & opcode = dec & currentReg = b : next[decInstr.DEST];
    ~exceptionThrown & opcode = adc & currentReg = b : next[adcInstr.DEST];
    ~exceptionThrown & opcode = and & currentReg = b : next[andInstr.DEST];
    ~exceptionThrown & opcode = mov & currentReg = b : next[movInstr.DEST];
    ~exceptionThrown & opcode = pop & currentReg = b : next[popInstr.DEST];
    default : rbx;
esac;

init[ss_base] := ss_base_i;
next[ss_base] := case
    ~exceptionThrown & opcode = sysret : next[sysretInstr.ss_base];
    ~exceptionThrown & opcode = syscall : next[syscallInstr.ss_base];
    default : ss_base;
esac;

init[rsp] := rsp_i;
next[rsp] := case
    ~exceptionThrown & opcode = push : next[pushInstr.rsp];
    ~exceptionThrown & opcode = pop : next[popInstr.rsp];
    default : rsp;
esac;

init[r11] := r11_i;
next[r11] := case
    ~exceptionThrown & opcode = syscall : next[syscallInstr.r11];
    default : r11;
esac;

init[EFER] := EFER_i;
next[EFER] := EFER;


init[ss_selector] := ss_selector_i;
next[ss_selector] := case
    ~exceptionThrown & opcode = sysret : next[sysretInstr.ss_selector];
    ~exceptionThrown & opcode = syscall : next[syscallInstr.ss_selector];
    default : ss_selector;
esac;

init[rip] := rip_i;
next[rip] := case
    ~exceptionThrown & opcode = sysret : next[sysretInstr.rip];
    ~exceptionThrown & opcode = syscall : next[syscallInstr.rip];
    default : rip;
esac;

init[rdx] := rdx_i;
next[rdx] := case
    ~exceptionThrown & opcode = add & currentReg = d : next[addInstr.DEST];
    ~exceptionThrown & opcode = inc & currentReg = d : next[incInstr.DEST];
    ~exceptionThrown & opcode = dec & currentReg = d : next[decInstr.DEST];
    ~exceptionThrown & opcode = adc & currentReg = d : next[adcInstr.DEST];
    ~exceptionThrown & opcode = and & currentReg = d : next[andInstr.DEST];
    ~exceptionThrown & opcode = mov & currentReg = d : next[movInstr.DEST];
    ~exceptionThrown & opcode = pop & currentReg = d : next[popInstr.DEST];
    default : rdx;
esac;

init[cs_base] := cs_base_i;
next[cs_base] := case
    ~exceptionThrown & opcode = sysret : next[sysretInstr.cs_base];
    ~exceptionThrown & opcode = syscall : next[syscallInstr.cs_base];
    default : cs_base;
esac;

init[cs_limit] := cs_limit_i;
next[cs_limit] := case
    ~exceptionThrown & opcode = sysret : next[sysretInstr.cs_limit];
    ~exceptionThrown & opcode = syscall : next[syscallInstr.cs_limit];
    default : cs_limit;
esac;

init[cs_selector] := cs_selector_i;
next[cs_selector] := case
    ~exceptionThrown & opcode = sysret : next[sysretInstr.cs_selector];
    ~exceptionThrown & opcode = syscall : next[syscallInstr.cs_selector];
    default : cs_selector;
esac;

init[CR0] := CR0_i;
next[CR0] := CR0;


init[cpl] := cpl_i;
next[cpl] := case
    ~exceptionThrown & opcode = sysret : next[sysretInstr.cpl];
    ~exceptionThrown & opcode = syscall : next[syscallInstr.cpl];
    default : cpl;
esac;


init[exceptionThrown] := false;
next[exceptionThrown] := case
    opcode = sysret & sysretInstr.exitStatus != Normal : true;
    opcode = out & outInstr.exitStatus != Normal : true;
    opcode = syscall & syscallInstr.exitStatus != Normal : true;
    default : exceptionThrown;
esac;

init[rflags] := rflags_i;
next[rflags] := case
    ~exceptionThrown & opcode = sysret : next[sysretInstr.rflags];
    ~exceptionThrown & opcode = syscall : next[syscallInstr.rflags];
    default : rflags;
esac;

init[rax] := rax_i;
next[rax] := case
    ~exceptionThrown & opcode = add & currentReg = a : next[addInstr.DEST];
    ~exceptionThrown & opcode = inc & currentReg = a : next[incInstr.DEST];
    ~exceptionThrown & opcode = dec & currentReg = a : next[decInstr.DEST];
    ~exceptionThrown & opcode = adc & currentReg = a : next[adcInstr.DEST];
    ~exceptionThrown & opcode = and & currentReg = a : next[andInstr.DEST];
    ~exceptionThrown & opcode = mov & currentReg = a : next[movInstr.DEST];
    ~exceptionThrown & opcode = pop & currentReg = a : next[popInstr.DEST];
    default : rax;
esac;

(* ----- CONTROL MODULE ----- *)

CONTROL

EXTVAR

opcode : opcodes := {add, wrmsr, inc, sysret, dec, push, wrsmr, adc, and, mov, out, pop, syscall};

(*----- state/control.txt -----*)

STOREVAR

sysret_rcx : BITVEC[63]; (* RCX before sysret/pop *)
syscall_rcx : BITVEC[63]; (* RCX after syscall/push *)
syscall_rsp : BITVEC[63]; (*RSP before syscall*)
sysret_rsp : BITVEC[63]; (*RSP after sysret*)
sysret_cpl : BITVEC[1]; (*CPL after sysret*)
init_cpl : BITVEC[1];
opcodeStore : opcodes;

VAR

CONST


isUserControlled: PRED[1]; (* Predicate to decide whether stack is user controlled *)

DEFINE



b0 := 0x0 # [0:0];
b1 := 0x1 # [0:0];

three := (State.cpl = ((b0)@(b1))) | (State.cpl = ((b1)@(b1)))  | (State.cpl = ((b1)@(b0)));
threeInit := (init_cpl = ((b0)@(b1))) | (init_cpl = ((b1)@(b1)))  | (init_cpl = ((b1)@(b0)));
initialState := ((init_cpl = ((b0)@(b0)) & ~isUserControlled(syscall_rsp)) | (threeInit) & isUserControlled(syscall_rsp));

endingState := ((State.cpl = ((b0)@(b0)) & ~isUserControlled(sysret_rsp)) | (three) & isUserControlled(sysret_rsp));



(* Statements begin *)
EXEC
(*----------------------------------------------------------------*)
(* Simulate some number of simulations *)
(* x must changed to an actual  number*)
(*simulate(5);*)
(* We need to call syscall and context sw*)

syscall_rsp := State.rsp;
init_cpl := State.cpl; 
opcode[0] := push;                               (*RCX is set to RSP*)
opcode[1] := syscall;                                  (*User RSP is sent to the stack*)



opcode[3] := pop; 
opcode[4] := sysret;




simulate(2);
syscall_rcx := State.rcx;                             (*RCX must implicitly be canonical*)


simulate(1);                                         (*RCX must change to force sysret bug*)
sysret_rcx := State.rcx;
(*Will fault if rcx is not not canonical*)

simulate(1);
sysret_rsp := State.rsp;



decide((initialState & syscall_rsp = sysret_rsp & isUserControlled(syscall_rsp)) => ( State.cpl > ((b0)@b0)));

