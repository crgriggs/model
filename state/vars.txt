MODULE State

INPUT

opcode : opcodes;

VAR
ss_limit : BITVEC[20];
ss_selector : BITVEC[15];
rax : BITVEC[64];
rbx : BITVEC[64];
rcx : BITVEC[64];
rdx : BITVEC[64];
rflags : BITVEC[64];
r11 : BITVEC[64];
ss_base : BITVEC[32];
ss_accessRights : BITVEC[12];
EFER : BITVEC[64];
cs_base : BITVEC[32];
rip : BITVEC[64];
cs_selector : BITVEC[15];
cs_limit : BITVEC[20];
cpl : BITVEC[2];
cs_accessRights : BITVEC[12];
CR0 : BITVEC[64];
CR4 : BITVEC[64];
currentReg : register;
opcode : opcodes;
memory : BITVECFUNC[64];
stack : BITVECFUNC[64];
cache : BITVECFUNC[64];
rsp : BITVEC[64];
exceptionThrown : TRUTH;

CONST

i : BITVEC[64];
j : BITVEC[64];
k : BITVEC[64];
m0 : BITVECFUNC[64];
addr  : BITVEC[64];
SRC : BITVEC[64];


ss_limit_i : BITVEC[20];
ss_selector_i : BITVEC[15];
rax_i : BITVEC[64];
rbx_i : BITVEC[64];
rcx_i : BITVEC[64];
rdx_i : BITVEC[64];
rflags_i : BITVEC[64];
r11_i : BITVEC[64];
ss_base_i : BITVEC[32];
ss_accessRights_i : BITVEC[12];
EFER_i : BITVEC[64];
cs_base_i : BITVEC[32];
rip_i : BITVEC[64];
cs_selector_i : BITVEC[15];
cs_limit_i : BITVEC[20];
cpl_i : BITVEC[2];
cs_accessRights_i : BITVEC[12];
CR0_i : BITVEC[64];
CR4_i : BITVEC[64];
rsp_i : BITVEC[64];

manyCacheTypes : FUNC[1] of cachType:

DEFINE

ASSIGN

init[currentReg] := {a, b, c, d};
next[currentReg] := {a, b, c, d};

init[stack] := Lambda(i). m0(i);
next[stack] := Lambda(i).
	case
		i = next[pushInstr.rsp] & opcode = push : SRC; 
		default : stack(i); 
	esac;

init[memory] := Lambda(j). m0(j);
next[memory] := Lambda(j).
	case
		manyCacheTypes(j) = cacheable & opcode = mov & j = movInstr.DEST: SRC; 
		manyCacheTypes(j) = uncacheable & opcode = mov & j = movInstr.DEST: SRC; 
		default : memory(j); 
	esac;


init[cache] := Lambda(k). m0(k);
next[cache] := Lambda(k).
	case
		manyCacheTypes(k) = cacheable & opcode = mov & k = movInstr.DEST: SRC; 
		manyCacheTypes(k) = writeBack & opcode = mov & k = movInstr.DEST: SRC; 
		default : cache(k); 
	esac;