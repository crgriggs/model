
STOREVAR

sysret_rcx : BITVEC[63]; (* RCX before sysret/pop *)
syscall_rcx : BITVEC[63]; (* RCX after syscall/push *)
syscall_rsp : BITVEC[63]; (*RSP before syscall*)
sysret_rsp : BITVEC[63]; (*RSP after sysret*)
sysret_cpl : BITVEC[1]; (*CPL after sysret*)
init_cpl : BITVEC[1];
opcodeStore : opcodes;

VAR

CONST


isUserControlled: PRED[1]; (* Predicate to decide whether stack is user controlled *)

DEFINE



b0 := 0x0 # [0:0];
b1 := 0x1 # [0:0];

three := (State.cpl = ((b0)@(b1))) | (State.cpl = ((b1)@(b1)))  | (State.cpl = ((b1)@(b0)));
threeInit := (init_cpl = ((b0)@(b1))) | (init_cpl = ((b1)@(b1)))  | (init_cpl = ((b1)@(b0)));
initialState := ((init_cpl = ((b0)@(b0)) & ~isUserControlled(syscall_rsp)) | (threeInit) & isUserControlled(syscall_rsp));

endingState := ((State.cpl = ((b0)@(b0)) & ~isUserControlled(sysret_rsp)) | (three) & isUserControlled(sysret_rsp));



(* Statements begin *)
EXEC
(*----------------------------------------------------------------*)
(* Simulate some number of simulations *)
(* x must changed to an actual  number*)
(*simulate(5);*)
(* We need to call syscall and context sw*)

syscall_rsp := State.rsp;
init_cpl := State.cpl; 
opcode[0] := push;                               (*RCX is set to RSP*)
opcode[1] := syscall;                                  (*User RSP is sent to the stack*)



opcode[3] := pop; 
opcode[4] := sysret;




simulate(2);
syscall_rcx := State.rcx;                             (*RCX must implicitly be canonical*)


simulate(1);                                         (*RCX must change to force sysret bug*)
sysret_rcx := State.rcx;
(*Will fault if rcx is not not canonical*)

simulate(1);
sysret_rsp := State.rsp;




decide((initialState & syscall_rsp = sysret_rsp & isUserControlled(syscall_rsp)) => ( State.cpl > ((b0)@b0)));