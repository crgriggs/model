ADD
	I don't actually consider what would be in DEST in SRC I just make them two 64 bit constants and add them together. I assume this will generate a 64 bit number that can be placed in a register that will be chosen in the master state file. If that register is a 32 bit register than I can just choose the lower 32 bits and so on 

	needed to add visit nodes for binop and add
SYSCALL
	NOT does not equal not in python, but ~
	if then is ecountered with a fault doesn't delete the then 
	AND & OR are the bitwise operators while and & or are logical
	handling cs
	removing "or" from line when it should be " or "
	handling how faults (exit status affects assignments after)
	need to handle hex
	adding 10 things to the ast unary, slice, subscript etc
	Nones in case statements
	Need to handle vars in the conditional aka add state access
sysret
	intel syntax varies to say the least  if - then - fi on same line
	python doesn't like hex because it assumes a variable that starts with a number 
Define
	✔cs.selector only considering one round of defines
	✔access rights are trying to get state access State.cs.L
	✔exit status doesn't have state
	✔ss_accessRights and cs_accessRights not assigned
Const
	✔first part of english word booleans being seperated
	✔ECX? not rcx
	✔wrong size bit vectors
	✔"rcx is not canonical" is correct python
Assign
	✔exit status
		because you assigned ten
	✔wrong capitlization and punctuation
Var
	names don't equal assign names
✔Module Name

sti

File convert
	✔uses if to talk about rflags.if 
		python ast doesn't like
Boolean
	✔negate leaves in A B C form
		also looks incorrect
✔handling rflags like cs/ss_selector

CLAC/CLC
	one line instruction on rflags doesn't let rflags update
	doesn't have any rflags defined


State
	module names need "Instr" appended for some reason?
		i think enum can't have the same name as a module?
	vars need bitvector description 
	no semicolon on default
	boolean's are better as TRUTH than BITVEC[1]
	random use of OR, or, |
	some variables are referenced before they are written to so they should access that state var but how to  accurately determine this
		right now if it's after the phi function than it's reference by var_n so I think one round is fine
	inputs need to be linked to code
	enums can't match var names


convert rcx to be implicit in the code
print c=opcodes 
remo

cacheable writes to memory and cache
uncacheable writes to just memory
wb cacheable writes to just cache
